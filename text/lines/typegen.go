// Code generated by "core generate -add-types"; DO NOT EDIT.

package lines

import (
	"cogentcore.org/core/types"
)

var _ = types.AddType(&types.Type{Name: "cogentcore.org/core/text/lines.Diffs", IDName: "diffs", Doc: "Diffs are raw differences between text, in terms of lines, reporting a\nsequence of operations that would convert one buffer (a) into the other\nbuffer (b).  Each operation is either an 'r' (replace), 'd' (delete), 'i'\n(insert) or 'e' (equal)."})

var _ = types.AddType(&types.Type{Name: "cogentcore.org/core/text/lines.PatchRec", IDName: "patch-rec", Doc: "PatchRec is a self-contained record of a DiffLines result that contains\nthe source lines of the b buffer needed to patch a into b", Fields: []types.Field{{Name: "Op", Doc: "diff operation: 'r', 'd', 'i', 'e'"}, {Name: "Blines", Doc: "lines from B buffer needed for 'r' and 'i' operations"}}})

var _ = types.AddType(&types.Type{Name: "cogentcore.org/core/text/lines.Patch", IDName: "patch", Doc: "Patch is a collection of patch records needed to turn original a buffer into b"})

var _ = types.AddType(&types.Type{Name: "cogentcore.org/core/text/lines.DiffSelectData", IDName: "diff-select-data", Doc: "DiffSelectData contains data for one set of text", Fields: []types.Field{{Name: "Orig", Doc: "original text"}, {Name: "Edit", Doc: "edits applied"}, {Name: "LineMap", Doc: "mapping of original line numbers (index) to edited line numbers,\naccounting for the edits applied so far"}, {Name: "Undos", Doc: "Undos: stack of diffs applied"}, {Name: "EditUndo", Doc: "undo records"}, {Name: "LineMapUndo", Doc: "undo records for ALineMap"}}})

var _ = types.AddType(&types.Type{Name: "cogentcore.org/core/text/lines.DiffSelected", IDName: "diff-selected", Doc: "DiffSelected supports the incremental application of selected diffs\nbetween two files (either A -> B or B <- A), with Undo", Fields: []types.Field{{Name: "A"}, {Name: "B"}, {Name: "Diffs", Doc: "Diffs are the diffs between A and B"}}})

var _ = types.AddType(&types.Type{Name: "cogentcore.org/core/text/lines.Lines", IDName: "lines", Doc: "Lines manages multi-line monospaced text with a given line width in runes,\nso that all text wrapping, editing, and navigation logic can be managed\npurely in text space, allowing rendering and GUI layout to be relatively fast.\nThis is suitable for text editing and terminal applications, among others.\nThe text encoded as runes along with a corresponding [rich.Text] markup\nrepresentation with syntax highlighting etc.\nThe markup is updated in a separate goroutine for efficiency.\nEverything is protected by an overall sync.Mutex and is safe to concurrent access,\nand thus nothing is exported and all access is through protected accessor functions.\nIn general, all unexported methods do NOT lock, and all exported methods do.", Methods: []types.Method{{Name: "Open", Doc: "Open loads the given file into the buffer.", Directives: []types.Directive{{Tool: "types", Directive: "add"}}, Args: []string{"filename"}, Returns: []string{"error"}}, {Name: "Revert", Doc: "Revert re-opens text from the current file,\nif the filename is set; returns false if not.\nIt uses an optimized diff-based update to preserve\nexisting formatting, making it very fast if not very different.", Directives: []types.Directive{{Tool: "types", Directive: "add"}}, Returns: []string{"bool"}}}, Embeds: []types.Field{{Name: "Mutex", Doc: "use Lock(), Unlock() directly for overall mutex on any content updates"}}, Fields: []types.Field{{Name: "Settings", Doc: "Settings are the options for how text editing and viewing works."}, {Name: "Highlighter", Doc: "Highlighter does the syntax highlighting markup, and contains the\nparameters thereof, such as the language and style."}, {Name: "Autosave", Doc: "Autosave specifies whether an autosave copy of the file should\nbe automatically saved after changes are made."}, {Name: "FileModPromptFunc", Doc: "FileModPromptFunc is called when a file has been modified in the filesystem\nand it is about to be modified through an edit, in the fileModCheck function.\nThe prompt should determine whether the user wants to revert, overwrite, or\nsave current version as a different file. It must block until the user responds."}, {Name: "Meta", Doc: "Meta can be used to maintain misc metadata associated with the Lines text,\nwhich allows the Lines object to be the primary data type for applications\ndealing with text data, if there are just a few additional data elements needed.\nUse standard Go camel-case key names, standards in [metadata]."}, {Name: "fontStyle", Doc: "fontStyle is the default font styling to use for markup.\nIs set to use the monospace font."}, {Name: "undos", Doc: "undos is the undo manager."}, {Name: "filename", Doc: "filename is the filename of the file that was last loaded or saved.\nIf this is empty then no file-related functionality is engaged."}, {Name: "readOnly", Doc: "readOnly marks the contents as not editable. This is for the outer GUI\nelements to consult, and is not enforced within Lines itself."}, {Name: "fileInfo", Doc: "fileInfo is the full information about the current file, if one is set."}, {Name: "parseState", Doc: "parseState is the parsing state information for the file."}, {Name: "changed", Doc: "changed indicates whether any changes have been made.\nUse [IsChanged] method to access."}, {Name: "lines", Doc: "lines are the live lines of text being edited, with the latest modifications.\nThey are encoded as runes per line, which is necessary for one-to-one rune/glyph\nrendering correspondence. All textpos positions are in rune indexes."}, {Name: "tags", Doc: "tags are the extra custom tagged regions for each line."}, {Name: "hiTags", Doc: "hiTags are the syntax highlighting tags, which are auto-generated."}, {Name: "markup", Doc: "markup is the [rich.Text] encoded marked-up version of the text lines,\nwith the results of syntax highlighting. It just has the raw markup without\nadditional layout for a specific line width, which goes in a [view]."}, {Name: "views", Doc: "views are the distinct views of the lines, accessed via a unique view handle,\nwhich is the key in the map. Each view can have its own width, and thus its own\nmarkup and layout."}, {Name: "lineColors", Doc: "lineColors associate a color with a given line number (key of map),\ne.g., for a breakpoint or other such function."}, {Name: "markupEdits", Doc: "markupEdits are the edits that were made during the time it takes to generate\nthe new markup tags. this is rare but it does happen."}, {Name: "markupDelayTimer", Doc: "markupDelayTimer is the markup delay timer."}, {Name: "markupDelayMu", Doc: "markupDelayMu is the mutex for updating the markup delay timer."}, {Name: "posHistory", Doc: "posHistory is the history of cursor positions.\nIt can be used to move back through them."}, {Name: "links", Doc: "links is the collection of all hyperlinks within the markup source,\nindexed by the markup source line.\nonly updated at the full markup sweep."}, {Name: "batchUpdating", Doc: "batchUpdating indicates that a batch update is under way,\nso Input signals are not sent until the end."}, {Name: "autoSaving", Doc: "autoSaving is used in atomically safe way to protect autosaving"}, {Name: "notSaved", Doc: "notSaved indicates if the text has been changed (edited) relative to the\noriginal, since last Save. This can be true even when changed flag is\nfalse, because changed is cleared on EditDone, e.g., when texteditor\nis being monitored for OnChange and user does Control+Enter.\nUse IsNotSaved() method to query state."}, {Name: "fileModOK", Doc: "fileModOK have already asked about fact that file has changed since being\nopened, user is ok"}}})

var _ = types.AddType(&types.Type{Name: "cogentcore.org/core/text/lines.Settings", IDName: "settings", Doc: "Settings contains settings for editing text lines.", Embeds: []types.Field{{Name: "EditorSettings"}}, Fields: []types.Field{{Name: "CommentLine", Doc: "CommentLine are character(s) that start a single-line comment;\nif empty then multi-line comment syntax will be used."}, {Name: "CommentStart", Doc: "CommentStart are character(s) that start a multi-line comment\nor one that requires both start and end."}, {Name: "CommentEnd", Doc: "Commentend are character(s) that end a multi-line comment\nor one that requires both start and end."}}})

var _ = types.AddType(&types.Type{Name: "cogentcore.org/core/text/lines.Undo", IDName: "undo", Doc: "Undo is the textview.Buf undo manager", Fields: []types.Field{{Name: "Off", Doc: "if true, saving and using undos is turned off (e.g., inactive buffers)"}, {Name: "Stack", Doc: "undo stack of edits"}, {Name: "UndoStack", Doc: "undo stack of *undo* edits -- added to whenever an Undo is done -- for emacs-style undo"}, {Name: "Pos", Doc: "undo position in stack"}, {Name: "Group", Doc: "group counter"}, {Name: "Mu", Doc: "mutex protecting all updates"}}})

var _ = types.AddType(&types.Type{Name: "cogentcore.org/core/text/lines.view", IDName: "view", Doc: "view provides a view onto a shared [Lines] text buffer,\nwith a representation of view lines that are the wrapped versions of\nthe original [Lines.lines] source lines, with wrapping according to\nthe view width. Views are managed by the Lines.", Fields: []types.Field{{Name: "width", Doc: "width is the current line width in rune characters, used for line wrapping."}, {Name: "viewLines", Doc: "viewLines is the total number of line-wrapped lines."}, {Name: "vlineStarts", Doc: "vlineStarts are the positions in the original [Lines.lines] source for\nthe start of each view line. This slice is viewLines in length."}, {Name: "markup", Doc: "markup is the view-specific version of the [Lines.markup] markup for\neach view line (len = viewLines)."}, {Name: "lineToVline", Doc: "lineToVline maps the source [Lines.lines] indexes to the wrapped\nviewLines. Each slice value contains the index into the viewLines space,\nsuch that vlineStarts of that index is the start of the original source line.\nAny subsequent vlineStarts with the same Line and Char > 0 following this\nstarting line represent additional wrapped content from the same source line."}, {Name: "listeners", Doc: "listeners is used for sending Change, Input, and Close events to views."}}})
