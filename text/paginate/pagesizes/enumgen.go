// Code generated by "core generate"; DO NOT EDIT.

package pagesizes

import (
	"cogentcore.org/core/enums"
)

var _SizesValues = []Sizes{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}

// SizesN is the highest valid value for type Sizes, plus one.
const SizesN Sizes = 22

var _SizesValueMap = map[string]Sizes{`Custom`: 0, `Img1280x720`: 1, `Img1920x1080`: 2, `Img3840x2160`: 3, `Img7680x4320`: 4, `Img1024x768`: 5, `Img720x480`: 6, `Img640x480`: 7, `Img320x240`: 8, `A4`: 9, `USLetter`: 10, `USLegal`: 11, `A0`: 12, `A1`: 13, `A2`: 14, `A3`: 15, `A5`: 16, `A6`: 17, `A7`: 18, `A8`: 19, `A9`: 20, `A10`: 21}

var _SizesDescMap = map[Sizes]string{0: `Custom = nonstandard`, 1: `Image 1280x720 Px = 720p`, 2: `Image 1920x1080 Px = 1080p HD`, 3: `Image 3840x2160 Px = 4K`, 4: `Image 7680x4320 Px = 8K`, 5: `Image 1024x768 Px = XGA`, 6: `Image 720x480 Px = DVD`, 7: `Image 640x480 Px = VGA`, 8: `Image 320x240 Px = old CRT`, 9: `A4 = 210 x 297 mm`, 10: `USLetter = 8.5 x 11 in = 612 x 792 pt`, 11: `USLegal = 8.5 x 14 in = 612 x 1008 pt`, 12: `A0 = 841 x 1189 mm`, 13: `A1 = 594 x 841 mm`, 14: `A2 = 420 x 594 mm`, 15: `A3 = 297 x 420 mm`, 16: `A5 = 148 x 210 mm`, 17: `A6 = 105 x 148 mm`, 18: `A7 = 74 x 105`, 19: `A8 = 52 x 74 mm`, 20: `A9 = 37 x 52`, 21: `A10 = 26 x 37`}

var _SizesMap = map[Sizes]string{0: `Custom`, 1: `Img1280x720`, 2: `Img1920x1080`, 3: `Img3840x2160`, 4: `Img7680x4320`, 5: `Img1024x768`, 6: `Img720x480`, 7: `Img640x480`, 8: `Img320x240`, 9: `A4`, 10: `USLetter`, 11: `USLegal`, 12: `A0`, 13: `A1`, 14: `A2`, 15: `A3`, 16: `A5`, 17: `A6`, 18: `A7`, 19: `A8`, 20: `A9`, 21: `A10`}

// String returns the string representation of this Sizes value.
func (i Sizes) String() string { return enums.String(i, _SizesMap) }

// SetString sets the Sizes value from its string representation,
// and returns an error if the string is invalid.
func (i *Sizes) SetString(s string) error { return enums.SetString(i, s, _SizesValueMap, "Sizes") }

// Int64 returns the Sizes value as an int64.
func (i Sizes) Int64() int64 { return int64(i) }

// SetInt64 sets the Sizes value from an int64.
func (i *Sizes) SetInt64(in int64) { *i = Sizes(in) }

// Desc returns the description of the Sizes value.
func (i Sizes) Desc() string { return enums.Desc(i, _SizesDescMap) }

// SizesValues returns all possible values for the type Sizes.
func SizesValues() []Sizes { return _SizesValues }

// Values returns all possible values for the type Sizes.
func (i Sizes) Values() []enums.Enum { return enums.Values(_SizesValues) }

// MarshalText implements the [encoding.TextMarshaler] interface.
func (i Sizes) MarshalText() ([]byte, error) { return []byte(i.String()), nil }

// UnmarshalText implements the [encoding.TextUnmarshaler] interface.
func (i *Sizes) UnmarshalText(text []byte) error { return enums.UnmarshalText(i, text, "Sizes") }
