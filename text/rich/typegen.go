// Code generated by "core generate"; DO NOT EDIT.

package rich

import (
	"cogentcore.org/core/types"
)

var _ = types.AddType(&types.Type{Name: "cogentcore.org/core/text/rich.Style", IDName: "style", Doc: "Style contains all of the rich text styling properties, that apply to one\nspan of text. These are encoded into a uint32 rune value in [rich.Text].\nSee [text.Style] and [Settings] for additional context needed for full specification.", Directives: []types.Directive{{Tool: "go", Directive: "generate", Args: []string{"core", "generate"}}, {Tool: "types", Directive: "add", Args: []string{"-setters"}}}, Fields: []types.Field{{Name: "Size", Doc: "Size is the font size multiplier relative to the standard font size\nspecified in the [text.Style]."}, {Name: "Family", Doc: "Family indicates the generic family of typeface to use, where the\nspecific named values to use for each are provided in the [Settings],\nor [text.Style] for [Custom]."}, {Name: "Slant", Doc: "Slant allows italic or oblique faces to be selected."}, {Name: "Weight", Doc: "Weights are the degree of blackness or stroke thickness of a font.\nThis value ranges from 100.0 to 900.0, with 400.0 as normal."}, {Name: "Stretch", Doc: "Stretch is the width of a font as an approximate fraction of the normal width.\nWidths range from 0.5 to 2.0 inclusive, with 1.0 as the normal width."}, {Name: "Special", Doc: "Special additional formatting factors that are not otherwise\ncaptured by changes in font rendering properties or decorations.\nSee [Specials] for usage information: use [Text.StartSpecial]\nand [Text.EndSpecial] to set."}, {Name: "Decoration", Doc: "Decorations are underline, line-through, etc, as bit flags\nthat must be set using [Decorations.SetFlag]."}, {Name: "Direction", Doc: "Direction is the direction to render the text."}, {Name: "fillColor", Doc: "fillColor is the color to use for glyph fill (i.e., the standard \"ink\" color).\nMust use SetFillColor to set Decoration fillColor flag.\nThis will be encoded in a uint32 following the style rune, in rich.Text spans."}, {Name: "strokeColor", Doc: "strokeColor is the color to use for glyph outline stroking.\nMust use SetStrokeColor to set Decoration strokeColor flag.\nThis will be encoded in a uint32 following the style rune, in rich.Text spans."}, {Name: "background", Doc: "background is the color to use for the background region.\nMust use SetBackground to set the Decoration background flag.\nThis will be encoded in a uint32 following the style rune, in rich.Text spans."}, {Name: "URL", Doc: "URL is the URL for a link element. It is encoded in runes after the style runes."}}})

// SetSize sets the [Style.Size]:
// Size is the font size multiplier relative to the standard font size
// specified in the [text.Style].
func (t *Style) SetSize(v float32) *Style { t.Size = v; return t }

// SetFamily sets the [Style.Family]:
// Family indicates the generic family of typeface to use, where the
// specific named values to use for each are provided in the [Settings],
// or [text.Style] for [Custom].
func (t *Style) SetFamily(v Family) *Style { t.Family = v; return t }

// SetSlant sets the [Style.Slant]:
// Slant allows italic or oblique faces to be selected.
func (t *Style) SetSlant(v Slants) *Style { t.Slant = v; return t }

// SetWeight sets the [Style.Weight]:
// Weights are the degree of blackness or stroke thickness of a font.
// This value ranges from 100.0 to 900.0, with 400.0 as normal.
func (t *Style) SetWeight(v Weights) *Style { t.Weight = v; return t }

// SetStretch sets the [Style.Stretch]:
// Stretch is the width of a font as an approximate fraction of the normal width.
// Widths range from 0.5 to 2.0 inclusive, with 1.0 as the normal width.
func (t *Style) SetStretch(v Stretch) *Style { t.Stretch = v; return t }

// SetSpecial sets the [Style.Special]:
// Special additional formatting factors that are not otherwise
// captured by changes in font rendering properties or decorations.
// See [Specials] for usage information: use [Text.StartSpecial]
// and [Text.EndSpecial] to set.
func (t *Style) SetSpecial(v Specials) *Style { t.Special = v; return t }

// SetDirection sets the [Style.Direction]:
// Direction is the direction to render the text.
func (t *Style) SetDirection(v Directions) *Style { t.Direction = v; return t }

// SetURL sets the [Style.URL]:
// URL is the URL for a link element. It is encoded in runes after the style runes.
func (t *Style) SetURL(v string) *Style { t.URL = v; return t }
