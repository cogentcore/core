// Code generated by "core generate"; DO NOT EDIT.

package styles

import (
	"cogentcore.org/core/types"
)

var _ = types.AddType(&types.Type{Name: "cogentcore.org/core/styles.Border", IDName: "border", Doc: "Border contains style parameters for borders", Directives: []types.Directive{{Tool: "types", Directive: "add"}}, Fields: []types.Field{{Name: "Style", Doc: "Style specifies how to draw the border"}, {Name: "Width", Doc: "Width specifies the width of the border"}, {Name: "Radius", Doc: "Radius specifies the radius (rounding) of the corners"}, {Name: "Offset", Doc: "Offset specifies how much, if any, the border is offset\nfrom its element. It is only applicable in the standard\nbox model, which is used by [paint.Painter.DrawStdBox] and\nall standard GUI elements."}, {Name: "Color", Doc: "Color specifies the color of the border"}}})

var _ = types.AddType(&types.Type{Name: "cogentcore.org/core/styles.Shadow", IDName: "shadow", Doc: "style parameters for shadows", Directives: []types.Directive{{Tool: "types", Directive: "add"}}, Fields: []types.Field{{Name: "OffsetX", Doc: "OffsetX is th horizontal offset of the shadow.\nPositive moves it right, negative moves it left."}, {Name: "OffsetY", Doc: "OffsetY is the vertical offset of the shadow.\nPositive moves it down, negative moves it up."}, {Name: "Blur", Doc: "Blur specifies the blur radius of the shadow.\nHigher numbers make it more blurry."}, {Name: "Spread", Doc: "Spread specifies the spread radius of the shadow.\nPositive numbers increase the size of the shadow,\nand negative numbers decrease the size."}, {Name: "Color", Doc: "Color specifies the color of the shadow."}, {Name: "Inset", Doc: "Inset specifies whether the shadow is inset within the\nbox instead of outset outside of the box.\nTODO: implement."}}})

var _ = types.AddType(&types.Type{Name: "cogentcore.org/core/styles.Font", IDName: "font", Doc: "Font contains all font styling information.\nMost of font information is inherited.", Directives: []types.Directive{{Tool: "types", Directive: "add"}}, Fields: []types.Field{{Name: "Size", Doc: "Size of font to render (inherited).\nConverted to points when getting font to use."}, {Name: "Family", Doc: "Family indicates the generic family of typeface to use, where the\nspecific named values to use for each are provided in the [Settings],\nor [CustomFont] for [Custom]."}, {Name: "CustomFont", Doc: "CustomFont specifies the Custom font name for Family = Custom."}, {Name: "Slant", Doc: "Slant allows italic or oblique faces to be selected."}, {Name: "Weight", Doc: "Weights are the degree of blackness or stroke thickness of a font.\nThis value ranges from 100.0 to 900.0, with 400.0 as normal."}, {Name: "Stretch", Doc: "Stretch is the width of a font as an approximate fraction of the normal width.\nWidths range from 0.5 to 2.0 inclusive, with 1.0 as the normal width."}, {Name: "Decoration", Doc: "Decorations are underline, line-through, etc, as bit flags\nthat must be set using [Decorations.SetFlag]."}}})

var _ = types.AddType(&types.Type{Name: "cogentcore.org/core/styles.AlignSet", IDName: "align-set", Doc: "AlignSet specifies the 3 levels of Justify or Align: Content, Items, and Self", Directives: []types.Directive{{Tool: "types", Directive: "add"}}, Fields: []types.Field{{Name: "Content", Doc: "Content specifies the distribution of the entire collection of items within\nany larger amount of space allocated to the container.  By contrast, Items\nand Self specify distribution within the individual element's allocated space."}, {Name: "Items", Doc: "Items specifies the distribution within the individual element's allocated space,\nas a default for all items within a collection."}, {Name: "Self", Doc: "Self specifies the distribution within the individual element's allocated space,\nfor this specific item.  Auto defaults to containers Items setting."}}})

var _ = types.AddType(&types.Type{Name: "cogentcore.org/core/styles.Paint", IDName: "paint", Doc: "Paint provides the styling parameters for SVG-style rendering,\nincluding the Path stroke and fill properties, and font and text\nproperties.", Directives: []types.Directive{{Tool: "types", Directive: "add"}}, Embeds: []types.Field{{Name: "Path"}}, Fields: []types.Field{{Name: "Font", Doc: "Font selects font properties."}, {Name: "Text", Doc: "Text has the text styling settings."}, {Name: "ClipPath", Doc: "ClipPath is a clipping path for this item."}, {Name: "Mask", Doc: "Mask is a rendered image of the mask for this item."}}})

var _ = types.AddType(&types.Type{Name: "cogentcore.org/core/styles.Path", IDName: "path", Doc: "Path provides the styling parameters for path-level rendering:\nStroke and Fill.", Directives: []types.Directive{{Tool: "types", Directive: "add"}}, Fields: []types.Field{{Name: "Off", Doc: "Off indicates that node and everything below it are off, non-rendering.\nThis is auto-updated based on other settings."}, {Name: "Display", Doc: "Display is the user-settable flag that determines if this item\nshould be displayed."}, {Name: "Stroke", Doc: "Stroke (line drawing) parameters."}, {Name: "Fill", Doc: "Fill (region filling) parameters."}, {Name: "Opacity", Doc: "Opacity is a global transparency alpha factor that applies to stroke and fill."}, {Name: "Transform", Doc: "Transform has our additions to the transform stack."}, {Name: "VectorEffect", Doc: "VectorEffect has various rendering special effects settings."}, {Name: "UnitContext", Doc: "UnitContext has parameters necessary for determining unit sizes."}, {Name: "StyleSet", Doc: "StyleSet indicates if the styles already been set."}, {Name: "PropertiesNil"}, {Name: "dotsSet"}, {Name: "lastUnCtxt"}}})

var _ = types.AddType(&types.Type{Name: "cogentcore.org/core/styles.Style", IDName: "style", Doc: "Style contains all of the style properties used for GUI widgets.", Directives: []types.Directive{{Tool: "types", Directive: "add"}}, Fields: []types.Field{{Name: "State", Doc: "State holds style-relevant state flags, for convenient styling access,\ngiven that styles typically depend on element states."}, {Name: "Abilities", Doc: "Abilities specifies the abilities of this element, which determine\nwhich kinds of states the element can express.\nThis is used by the system/events system.  Putting this info next\nto the State info makes it easy to configure and manage."}, {Name: "Cursor", Doc: "the cursor to switch to upon hovering over the element (inherited)"}, {Name: "Padding", Doc: "Padding is the transparent space around central content of box,\nwhich is _included_ in the size of the standard box rendering."}, {Name: "Margin", Doc: "Margin is the outer-most transparent space around box element,\nwhich is _excluded_ from standard box rendering."}, {Name: "Display", Doc: "Display controls how items are displayed, in terms of layout"}, {Name: "Direction", Doc: "Direction specifies the way in which elements are laid out, or\nthe dimension on which an element is longer / travels in."}, {Name: "Wrap", Doc: "Wrap causes elements to wrap around in the CrossAxis dimension\nto fit within sizing constraints."}, {Name: "Justify", Doc: "Justify specifies the distribution of elements along the main axis,\ni.e., the same as Direction, for Flex Display.  For Grid, the main axis is\ngiven by the writing direction (e.g., Row-wise for latin based languages)."}, {Name: "Align", Doc: "Align specifies the cross-axis alignment of elements, orthogonal to the\nmain Direction axis. For Grid, the cross-axis is orthogonal to the\nwriting direction (e.g., Column-wise for latin based languages)."}, {Name: "Min", Doc: "Min is the minimum size of the actual content, exclusive of additional space\nfrom padding, border, margin; 0 = default is sum of Min for all content\n(which _includes_ space for all sub-elements).\nThis is equivalent to the Basis for the CSS flex styling model."}, {Name: "Max", Doc: "Max is the maximum size of the actual content, exclusive of additional space\nfrom padding, border, margin; 0 = default provides no Max size constraint"}, {Name: "Grow", Doc: "Grow is the proportional amount that the element can grow (stretch)\nif there is more space available.  0 = default = no growth.\nExtra available space is allocated as: Grow / sum (all Grow).\nImportant: grow elements absorb available space and thus are not\nsubject to alignment (Center, End)."}, {Name: "GrowWrap", Doc: "GrowWrap is a special case for Text elements where it grows initially\nin the horizontal axis to allow for longer, word wrapped text to fill\nthe available space, but then it does not grow thereafter, so that alignment\noperations still work (Grow elements do not align because they absorb all\navailable space). Do NOT set this for non-Text elements."}, {Name: "RenderBox", Doc: "RenderBox determines whether to render the standard box model for the element.\nThis is typically necessary for most elements and helps prevent text, border,\nand box shadow from rendering over themselves. Therefore, it should be kept at\nits default value of true in most circumstances, but it can be set to false\nwhen the element is fully managed by something that is guaranteed to render the\nappropriate background color and/or border for the element."}, {Name: "FillMargin", Doc: "FillMargin determines is whether to fill the margin with\nthe surrounding background color before rendering the element itself.\nThis is typically necessary to prevent text, border, and box shadow from\nrendering over themselves. Therefore, it should be kept at its default value\nof true in most circumstances, but it can be set to false when the element\nis fully managed by something that is guaranteed to render the\nappropriate background color for the element. It is irrelevant if RenderBox\nis false."}, {Name: "Overflow", Doc: "Overflow determines how to handle overflowing content in a layout.\nDefault is OverflowVisible.  Set to OverflowAuto to enable scrollbars."}, {Name: "Gap", Doc: "For layouts, extra space added between elements in the layout."}, {Name: "Columns", Doc: "For grid layouts, the number of columns to use.\nIf > 0, number of rows is computed as N elements / Columns.\nUsed as a constraint in layout if individual elements\ndo not specify their row, column positions"}, {Name: "ObjectFit", Doc: "If this object is a replaced object (image, video, etc)\nor has a background image, ObjectFit specifies the way\nin which the replaced object should be fit into the element."}, {Name: "ObjectPosition", Doc: "If this object is a replaced object (image, video, etc)\nor has a background image, ObjectPosition specifies the\nX,Y position of the object within the space allocated for\nthe object (see ObjectFit)."}, {Name: "Border", Doc: "Border is a rendered border around the element."}, {Name: "MaxBorder", Doc: "MaxBorder is the largest border that will ever be rendered\naround the element, the size of which is used for computing\nthe effective margin to allocate for the element."}, {Name: "BoxShadow", Doc: "BoxShadow is the box shadows to render around box (can have multiple)"}, {Name: "MaxBoxShadow", Doc: "MaxBoxShadow contains the largest shadows that will ever be rendered\naround the element, the size of which are used for computing the\neffective margin to allocate for the element."}, {Name: "Color", Doc: "Color specifies the text / content color, and it is inherited."}, {Name: "Background", Doc: "Background specifies the background of the element. It is not inherited,\nand it is nil (transparent) by default."}, {Name: "Opacity", Doc: "alpha value between 0 and 1 to apply to the foreground and background\nof this element and all of its children."}, {Name: "StateLayer", Doc: "StateLayer, if above zero, indicates to create a state layer over\nthe element with this much opacity (on a scale of 0-1) and the\ncolor Color (or StateColor if it defined). It is automatically\nset based on State, but can be overridden in stylers."}, {Name: "StateColor", Doc: "StateColor, if not nil, is the color to use for the StateLayer\ninstead of Color. If you want to disable state layers\nfor an element, do not use this; instead, set StateLayer to 0."}, {Name: "ActualBackground", Doc: "ActualBackground is the computed actual background rendered for the element,\ntaking into account its Background, Opacity, StateLayer, and parent\nActualBackground. It is automatically computed and should not be set manually."}, {Name: "VirtualKeyboard", Doc: "VirtualKeyboard is the virtual keyboard to display, if any,\non mobile platforms when this element is focused. It is not\nused if the element is read only."}, {Name: "Pos", Doc: "Pos is used for the position of the widget if the parent frame\nhas [Style.Display] = [Custom]."}, {Name: "ZIndex", Doc: "ordering factor for rendering depth -- lower numbers rendered first.\nSort children according to this factor"}, {Name: "Row", Doc: "specifies the row that this element should appear within a grid layout"}, {Name: "Col", Doc: "specifies the column that this element should appear within a grid layout"}, {Name: "RowSpan", Doc: "specifies the number of sequential rows that this element should occupy\nwithin a grid layout (todo: not currently supported)"}, {Name: "ColSpan", Doc: "specifies the number of sequential columns that this element should occupy\nwithin a grid layout"}, {Name: "ScrollbarWidth", Doc: "ScrollbarWidth is the width of layout scrollbars. It defaults\nto [DefaultScrollbarWidth], and it is inherited."}, {Name: "IconSize", Doc: "IconSize specifies the size of icons in this widget, if it has icons.\nThe default icon size is 1em for X and Y. This is inherited."}, {Name: "Font", Doc: "Font styling parameters applicable to individual spans of text."}, {Name: "Text", Doc: "Text styling parameters applicable to a paragraph of text."}, {Name: "UnitContext", Doc: "unit context: parameters necessary for anchoring relative units"}}})

var _ = types.AddType(&types.Type{Name: "cogentcore.org/core/styles.Text", IDName: "text", Doc: "Text has styles for text layout styling.\nMost of these are inherited", Directives: []types.Directive{{Tool: "types", Directive: "add"}}, Fields: []types.Field{{Name: "Align", Doc: "Align specifies how to align text along the default direction (inherited).\nThis *only* applies to the text within its containing element,\nand is relevant only for multi-line text."}, {Name: "AlignV", Doc: "AlignV specifies \"vertical\" (orthogonal to default direction)\nalignment of text (inherited).\nThis *only* applies to the text within its containing element:\nif that element does not have a specified size\nthat is different from the text size, then this has *no effect*."}, {Name: "LineHeight", Doc: "LineHeight is a multiplier on the default font size for spacing between lines.\nIf there are larger font elements within a line, they will be accommodated, with\nthe same amount of total spacing added above that maximum size as if it was all\nthe same height. The default of 1.3 represents standard \"single spaced\" text."}, {Name: "WhiteSpace", Doc: "WhiteSpace (not inherited) specifies how white space is processed,\nand how lines are wrapped.  If set to WhiteSpaceNormal (default) lines are wrapped.\nSee info about interactions with Grow.X setting for this and the NoWrap case."}, {Name: "Direction", Doc: "Direction specifies the default text direction, which can be overridden if the\nunicode text is typically written in a different direction."}, {Name: "TabSize", Doc: "TabSize specifies the tab size, in number of characters (inherited)."}, {Name: "SelectColor", Doc: "SelectColor is the color to use for the background region of selected text (inherited)."}, {Name: "HighlightColor", Doc: "HighlightColor is the color to use for the background region of highlighted text (inherited)."}}})

var _ = types.AddType(&types.Type{Name: "cogentcore.org/core/styles.XY", IDName: "xy", Doc: "XY represents X,Y values", Directives: []types.Directive{{Tool: "types", Directive: "add"}}, Fields: []types.Field{{Name: "X", Doc: "X is the horizontal axis value"}, {Name: "Y", Doc: "Y is the vertical axis value"}}})
