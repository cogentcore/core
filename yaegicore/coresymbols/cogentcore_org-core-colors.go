// Code generated by 'yaegi extract cogentcore.org/core/colors'. DO NOT EDIT.

package coresymbols

import (
	"cogentcore.org/core/colors"
	"image"
	"image/color"
	"reflect"
)

func init() {
	Symbols["cogentcore.org/core/colors/colors"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"Add":                  reflect.ValueOf(colors.Add),
		"Aliceblue":            reflect.ValueOf(&colors.Aliceblue).Elem(),
		"AlphaBlend":           reflect.ValueOf(colors.AlphaBlend),
		"Antiquewhite":         reflect.ValueOf(&colors.Antiquewhite).Elem(),
		"ApplyOpacity":         reflect.ValueOf(colors.ApplyOpacity),
		"ApplyOpacityNRGBA":    reflect.ValueOf(colors.ApplyOpacityNRGBA),
		"Aqua":                 reflect.ValueOf(&colors.Aqua).Elem(),
		"Aquamarine":           reflect.ValueOf(&colors.Aquamarine).Elem(),
		"AsHex":                reflect.ValueOf(colors.AsHex),
		"AsRGBA":               reflect.ValueOf(colors.AsRGBA),
		"AsString":             reflect.ValueOf(colors.AsString),
		"Azure":                reflect.ValueOf(&colors.Azure).Elem(),
		"BaseContext":          reflect.ValueOf(colors.BaseContext),
		"Beige":                reflect.ValueOf(&colors.Beige).Elem(),
		"Bisque":               reflect.ValueOf(&colors.Bisque).Elem(),
		"Black":                reflect.ValueOf(&colors.Black).Elem(),
		"Blanchedalmond":       reflect.ValueOf(&colors.Blanchedalmond).Elem(),
		"Blend":                reflect.ValueOf(colors.Blend),
		"BlendRGB":             reflect.ValueOf(colors.BlendRGB),
		"BlendTypesN":          reflect.ValueOf(colors.BlendTypesN),
		"BlendTypesValues":     reflect.ValueOf(colors.BlendTypesValues),
		"Blue":                 reflect.ValueOf(&colors.Blue).Elem(),
		"Blueviolet":           reflect.ValueOf(&colors.Blueviolet).Elem(),
		"Brown":                reflect.ValueOf(&colors.Brown).Elem(),
		"Burlywood":            reflect.ValueOf(&colors.Burlywood).Elem(),
		"CAM16":                reflect.ValueOf(colors.CAM16),
		"Cadetblue":            reflect.ValueOf(&colors.Cadetblue).Elem(),
		"Chartreuse":           reflect.ValueOf(&colors.Chartreuse).Elem(),
		"Chocolate":            reflect.ValueOf(&colors.Chocolate).Elem(),
		"Clearer":              reflect.ValueOf(colors.Clearer),
		"CloneUniform":         reflect.ValueOf(colors.CloneUniform),
		"Coral":                reflect.ValueOf(&colors.Coral).Elem(),
		"Cornflowerblue":       reflect.ValueOf(&colors.Cornflowerblue).Elem(),
		"Cornsilk":             reflect.ValueOf(&colors.Cornsilk).Elem(),
		"Crimson":              reflect.ValueOf(&colors.Crimson).Elem(),
		"Cyan":                 reflect.ValueOf(&colors.Cyan).Elem(),
		"Darkblue":             reflect.ValueOf(&colors.Darkblue).Elem(),
		"Darkcyan":             reflect.ValueOf(&colors.Darkcyan).Elem(),
		"Darkgoldenrod":        reflect.ValueOf(&colors.Darkgoldenrod).Elem(),
		"Darkgray":             reflect.ValueOf(&colors.Darkgray).Elem(),
		"Darkgreen":            reflect.ValueOf(&colors.Darkgreen).Elem(),
		"Darkgrey":             reflect.ValueOf(&colors.Darkgrey).Elem(),
		"Darkkhaki":            reflect.ValueOf(&colors.Darkkhaki).Elem(),
		"Darkmagenta":          reflect.ValueOf(&colors.Darkmagenta).Elem(),
		"Darkolivegreen":       reflect.ValueOf(&colors.Darkolivegreen).Elem(),
		"Darkorange":           reflect.ValueOf(&colors.Darkorange).Elem(),
		"Darkorchid":           reflect.ValueOf(&colors.Darkorchid).Elem(),
		"Darkred":              reflect.ValueOf(&colors.Darkred).Elem(),
		"Darksalmon":           reflect.ValueOf(&colors.Darksalmon).Elem(),
		"Darkseagreen":         reflect.ValueOf(&colors.Darkseagreen).Elem(),
		"Darkslateblue":        reflect.ValueOf(&colors.Darkslateblue).Elem(),
		"Darkslategray":        reflect.ValueOf(&colors.Darkslategray).Elem(),
		"Darkslategrey":        reflect.ValueOf(&colors.Darkslategrey).Elem(),
		"Darkturquoise":        reflect.ValueOf(&colors.Darkturquoise).Elem(),
		"Darkviolet":           reflect.ValueOf(&colors.Darkviolet).Elem(),
		"Deeppink":             reflect.ValueOf(&colors.Deeppink).Elem(),
		"Deepskyblue":          reflect.ValueOf(&colors.Deepskyblue).Elem(),
		"Dimgray":              reflect.ValueOf(&colors.Dimgray).Elem(),
		"Dimgrey":              reflect.ValueOf(&colors.Dimgrey).Elem(),
		"Dodgerblue":           reflect.ValueOf(&colors.Dodgerblue).Elem(),
		"Firebrick":            reflect.ValueOf(&colors.Firebrick).Elem(),
		"Floralwhite":          reflect.ValueOf(&colors.Floralwhite).Elem(),
		"Forestgreen":          reflect.ValueOf(&colors.Forestgreen).Elem(),
		"FromAny":              reflect.ValueOf(colors.FromAny),
		"FromFloat32":          reflect.ValueOf(colors.FromFloat32),
		"FromFloat64":          reflect.ValueOf(colors.FromFloat64),
		"FromHex":              reflect.ValueOf(colors.FromHex),
		"FromNRGBA":            reflect.ValueOf(colors.FromNRGBA),
		"FromNRGBAF32":         reflect.ValueOf(colors.FromNRGBAF32),
		"FromName":             reflect.ValueOf(colors.FromName),
		"FromRGB":              reflect.ValueOf(colors.FromRGB),
		"FromRGBAF32":          reflect.ValueOf(colors.FromRGBAF32),
		"FromString":           reflect.ValueOf(colors.FromString),
		"Fuchsia":              reflect.ValueOf(&colors.Fuchsia).Elem(),
		"Gainsboro":            reflect.ValueOf(&colors.Gainsboro).Elem(),
		"Ghostwhite":           reflect.ValueOf(&colors.Ghostwhite).Elem(),
		"Gold":                 reflect.ValueOf(&colors.Gold).Elem(),
		"Goldenrod":            reflect.ValueOf(&colors.Goldenrod).Elem(),
		"Gray":                 reflect.ValueOf(&colors.Gray).Elem(),
		"Green":                reflect.ValueOf(&colors.Green).Elem(),
		"Greenyellow":          reflect.ValueOf(&colors.Greenyellow).Elem(),
		"Grey":                 reflect.ValueOf(&colors.Grey).Elem(),
		"HCT":                  reflect.ValueOf(colors.HCT),
		"Honeydew":             reflect.ValueOf(&colors.Honeydew).Elem(),
		"Hotpink":              reflect.ValueOf(&colors.Hotpink).Elem(),
		"Indianred":            reflect.ValueOf(&colors.Indianred).Elem(),
		"Indigo":               reflect.ValueOf(&colors.Indigo).Elem(),
		"Inverse":              reflect.ValueOf(colors.Inverse),
		"IsNil":                reflect.ValueOf(colors.IsNil),
		"Ivory":                reflect.ValueOf(&colors.Ivory).Elem(),
		"Khaki":                reflect.ValueOf(&colors.Khaki).Elem(),
		"Lavender":             reflect.ValueOf(&colors.Lavender).Elem(),
		"Lavenderblush":        reflect.ValueOf(&colors.Lavenderblush).Elem(),
		"Lawngreen":            reflect.ValueOf(&colors.Lawngreen).Elem(),
		"Lemonchiffon":         reflect.ValueOf(&colors.Lemonchiffon).Elem(),
		"Lightblue":            reflect.ValueOf(&colors.Lightblue).Elem(),
		"Lightcoral":           reflect.ValueOf(&colors.Lightcoral).Elem(),
		"Lightcyan":            reflect.ValueOf(&colors.Lightcyan).Elem(),
		"Lightgoldenrodyellow": reflect.ValueOf(&colors.Lightgoldenrodyellow).Elem(),
		"Lightgray":            reflect.ValueOf(&colors.Lightgray).Elem(),
		"Lightgreen":           reflect.ValueOf(&colors.Lightgreen).Elem(),
		"Lightgrey":            reflect.ValueOf(&colors.Lightgrey).Elem(),
		"Lightpink":            reflect.ValueOf(&colors.Lightpink).Elem(),
		"Lightsalmon":          reflect.ValueOf(&colors.Lightsalmon).Elem(),
		"Lightseagreen":        reflect.ValueOf(&colors.Lightseagreen).Elem(),
		"Lightskyblue":         reflect.ValueOf(&colors.Lightskyblue).Elem(),
		"Lightslategray":       reflect.ValueOf(&colors.Lightslategray).Elem(),
		"Lightslategrey":       reflect.ValueOf(&colors.Lightslategrey).Elem(),
		"Lightsteelblue":       reflect.ValueOf(&colors.Lightsteelblue).Elem(),
		"Lightyellow":          reflect.ValueOf(&colors.Lightyellow).Elem(),
		"Lime":                 reflect.ValueOf(&colors.Lime).Elem(),
		"Limegreen":            reflect.ValueOf(&colors.Limegreen).Elem(),
		"Linen":                reflect.ValueOf(&colors.Linen).Elem(),
		"Magenta":              reflect.ValueOf(&colors.Magenta).Elem(),
		"Map":                  reflect.ValueOf(&colors.Map).Elem(),
		"Maroon":               reflect.ValueOf(&colors.Maroon).Elem(),
		"Mediumaquamarine":     reflect.ValueOf(&colors.Mediumaquamarine).Elem(),
		"Mediumblue":           reflect.ValueOf(&colors.Mediumblue).Elem(),
		"Mediumorchid":         reflect.ValueOf(&colors.Mediumorchid).Elem(),
		"Mediumpurple":         reflect.ValueOf(&colors.Mediumpurple).Elem(),
		"Mediumseagreen":       reflect.ValueOf(&colors.Mediumseagreen).Elem(),
		"Mediumslateblue":      reflect.ValueOf(&colors.Mediumslateblue).Elem(),
		"Mediumspringgreen":    reflect.ValueOf(&colors.Mediumspringgreen).Elem(),
		"Mediumturquoise":      reflect.ValueOf(&colors.Mediumturquoise).Elem(),
		"Mediumvioletred":      reflect.ValueOf(&colors.Mediumvioletred).Elem(),
		"Midnightblue":         reflect.ValueOf(&colors.Midnightblue).Elem(),
		"Mintcream":            reflect.ValueOf(&colors.Mintcream).Elem(),
		"Mistyrose":            reflect.ValueOf(&colors.Mistyrose).Elem(),
		"Moccasin":             reflect.ValueOf(&colors.Moccasin).Elem(),
		"NRGBAF32Model":        reflect.ValueOf(&colors.NRGBAF32Model).Elem(),
		"Names":                reflect.ValueOf(&colors.Names).Elem(),
		"Navajowhite":          reflect.ValueOf(&colors.Navajowhite).Elem(),
		"Navy":                 reflect.ValueOf(&colors.Navy).Elem(),
		"Oldlace":              reflect.ValueOf(&colors.Oldlace).Elem(),
		"Olive":                reflect.ValueOf(&colors.Olive).Elem(),
		"Olivedrab":            reflect.ValueOf(&colors.Olivedrab).Elem(),
		"Opaquer":              reflect.ValueOf(colors.Opaquer),
		"Orange":               reflect.ValueOf(&colors.Orange).Elem(),
		"Orangered":            reflect.ValueOf(&colors.Orangered).Elem(),
		"Orchid":               reflect.ValueOf(&colors.Orchid).Elem(),
		"Palegoldenrod":        reflect.ValueOf(&colors.Palegoldenrod).Elem(),
		"Palegreen":            reflect.ValueOf(&colors.Palegreen).Elem(),
		"Palette":              reflect.ValueOf(&colors.Palette).Elem(),
		"Paleturquoise":        reflect.ValueOf(&colors.Paleturquoise).Elem(),
		"Palevioletred":        reflect.ValueOf(&colors.Palevioletred).Elem(),
		"Papayawhip":           reflect.ValueOf(&colors.Papayawhip).Elem(),
		"Pattern":              reflect.ValueOf(colors.Pattern),
		"Peachpuff":            reflect.ValueOf(&colors.Peachpuff).Elem(),
		"Peru":                 reflect.ValueOf(&colors.Peru).Elem(),
		"Pink":                 reflect.ValueOf(&colors.Pink).Elem(),
		"Plum":                 reflect.ValueOf(&colors.Plum).Elem(),
		"Powderblue":           reflect.ValueOf(&colors.Powderblue).Elem(),
		"Purple":               reflect.ValueOf(&colors.Purple).Elem(),
		"RGB":                  reflect.ValueOf(colors.RGB),
		"RGBAF32Model":         reflect.ValueOf(&colors.RGBAF32Model).Elem(),
		"Rebeccapurple":        reflect.ValueOf(&colors.Rebeccapurple).Elem(),
		"Red":                  reflect.ValueOf(&colors.Red).Elem(),
		"Rosybrown":            reflect.ValueOf(&colors.Rosybrown).Elem(),
		"Royalblue":            reflect.ValueOf(&colors.Royalblue).Elem(),
		"Saddlebrown":          reflect.ValueOf(&colors.Saddlebrown).Elem(),
		"Salmon":               reflect.ValueOf(&colors.Salmon).Elem(),
		"Sandybrown":           reflect.ValueOf(&colors.Sandybrown).Elem(),
		"Scheme":               reflect.ValueOf(&colors.Scheme).Elem(),
		"Schemes":              reflect.ValueOf(&colors.Schemes).Elem(),
		"Seagreen":             reflect.ValueOf(&colors.Seagreen).Elem(),
		"Seashell":             reflect.ValueOf(&colors.Seashell).Elem(),
		"SetScheme":            reflect.ValueOf(colors.SetScheme),
		"SetSchemes":           reflect.ValueOf(colors.SetSchemes),
		"SetSchemesFromKey":    reflect.ValueOf(colors.SetSchemesFromKey),
		"Sienna":               reflect.ValueOf(&colors.Sienna).Elem(),
		"Silver":               reflect.ValueOf(&colors.Silver).Elem(),
		"Skyblue":              reflect.ValueOf(&colors.Skyblue).Elem(),
		"Slateblue":            reflect.ValueOf(&colors.Slateblue).Elem(),
		"Slategray":            reflect.ValueOf(&colors.Slategray).Elem(),
		"Slategrey":            reflect.ValueOf(&colors.Slategrey).Elem(),
		"Snow":                 reflect.ValueOf(&colors.Snow).Elem(),
		"Spaced":               reflect.ValueOf(colors.Spaced),
		"Springgreen":          reflect.ValueOf(&colors.Springgreen).Elem(),
		"Steelblue":            reflect.ValueOf(&colors.Steelblue).Elem(),
		"Sub":                  reflect.ValueOf(colors.Sub),
		"Tan":                  reflect.ValueOf(&colors.Tan).Elem(),
		"Teal":                 reflect.ValueOf(&colors.Teal).Elem(),
		"Thistle":              reflect.ValueOf(&colors.Thistle).Elem(),
		"ToBase":               reflect.ValueOf(colors.ToBase),
		"ToContainer":          reflect.ValueOf(colors.ToContainer),
		"ToFloat32":            reflect.ValueOf(colors.ToFloat32),
		"ToFloat64":            reflect.ValueOf(colors.ToFloat64),
		"ToOn":                 reflect.ValueOf(colors.ToOn),
		"ToOnContainer":        reflect.ValueOf(colors.ToOnContainer),
		"ToUniform":            reflect.ValueOf(colors.ToUniform),
		"Tomato":               reflect.ValueOf(&colors.Tomato).Elem(),
		"Transparent":          reflect.ValueOf(&colors.Transparent).Elem(),
		"Turquoise":            reflect.ValueOf(&colors.Turquoise).Elem(),
		"Uniform":              reflect.ValueOf(colors.Uniform),
		"Violet":               reflect.ValueOf(&colors.Violet).Elem(),
		"Wheat":                reflect.ValueOf(&colors.Wheat).Elem(),
		"White":                reflect.ValueOf(&colors.White).Elem(),
		"Whitesmoke":           reflect.ValueOf(&colors.Whitesmoke).Elem(),
		"WithA":                reflect.ValueOf(colors.WithA),
		"WithAF32":             reflect.ValueOf(colors.WithAF32),
		"WithB":                reflect.ValueOf(colors.WithB),
		"WithG":                reflect.ValueOf(colors.WithG),
		"WithR":                reflect.ValueOf(colors.WithR),
		"Yellow":               reflect.ValueOf(&colors.Yellow).Elem(),
		"Yellowgreen":          reflect.ValueOf(&colors.Yellowgreen).Elem(),

		// type definitions
		"BlendTypes": reflect.ValueOf((*colors.BlendTypes)(nil)),
		"Context":    reflect.ValueOf((*colors.Context)(nil)),
		"NRGBAF32":   reflect.ValueOf((*colors.NRGBAF32)(nil)),
		"RGBAF32":    reflect.ValueOf((*colors.RGBAF32)(nil)),

		// interface wrapper definitions
		"_Context": reflect.ValueOf((*_cogentcore_org_core_colors_Context)(nil)),
	}
}

// _cogentcore_org_core_colors_Context is an interface wrapper for Context type
type _cogentcore_org_core_colors_Context struct {
	IValue      interface{}
	WBase       func() color.RGBA
	WImageByURL func(url string) image.Image
}

func (W _cogentcore_org_core_colors_Context) Base() color.RGBA { return W.WBase() }
func (W _cogentcore_org_core_colors_Context) ImageByURL(url string) image.Image {
	return W.WImageByURL(url)
}
