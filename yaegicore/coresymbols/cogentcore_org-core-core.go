// Code generated by 'yaegi extract cogentcore.org/core/core'. DO NOT EDIT.

package coresymbols

import (
	"cogentcore.org/core/base/fileinfo/mimedata"
	"cogentcore.org/core/core"
	"cogentcore.org/core/events"
	"cogentcore.org/core/math32"
	"cogentcore.org/core/styles"
	"cogentcore.org/core/system/composer"
	"cogentcore.org/core/tree"
	"github.com/cogentcore/yaegi/interp"
	"go/constant"
	"go/token"
	"image"
	"image/draw"
	"reflect"
)

func init() {
	Symbols["cogentcore.org/core/core/core"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"AllRenderWindows":              reflect.ValueOf(&core.AllRenderWindows).Elem(),
		"AllSettings":                   reflect.ValueOf(&core.AllSettings).Elem(),
		"AppAbout":                      reflect.ValueOf(&core.AppAbout).Elem(),
		"AppColor":                      reflect.ValueOf(&core.AppColor).Elem(),
		"AppIcon":                       reflect.ValueOf(&core.AppIcon).Elem(),
		"AppearanceSettings":            reflect.ValueOf(&core.AppearanceSettings).Elem(),
		"AsButton":                      reflect.ValueOf(core.AsButton),
		"AsFrame":                       reflect.ValueOf(core.AsFrame),
		"AsTextField":                   reflect.ValueOf(core.AsTextField),
		"AsTree":                        reflect.ValueOf(core.AsTree),
		"AsWidget":                      reflect.ValueOf(core.AsWidget),
		"Bind":                          reflect.ValueOf(interp.GenericFunc("func Bind[T Value](value any, vw T, tags ...string) T { //yaegi:add\n\t// TODO: make tags be reflect.StructTag once yaegi is fixed to work with that\n\twb := vw.AsWidget()\n\talreadyBound := wb.ValueUpdate != nil\n\twb.ValueUpdate = func() {\n\t\tif vws, ok := any(vw).(ValueSetter); ok {\n\t\t\tErrorSnackbar(vw, vws.SetWidgetValue(value))\n\t\t} else {\n\t\t\tErrorSnackbar(vw, reflectx.SetRobust(vw.WidgetValue(), value))\n\t\t}\n\t}\n\twb.ValueOnChange = func() {\n\t\tErrorSnackbar(vw, reflectx.SetRobust(value, vw.WidgetValue()))\n\t}\n\tif alreadyBound {\n\t\tResetWidgetValue(vw)\n\t}\n\twb.ValueTitle = labels.FriendlyTypeName(reflectx.NonPointerType(reflect.TypeOf(value)))\n\tif ob, ok := any(vw).(OnBinder); ok {\n\t\ttag := reflect.StructTag(\"\")\n\t\tif len(tags) > 0 {\n\t\t\ttag = reflect.StructTag(tags[0])\n\t\t}\n\t\tob.OnBind(value, tag)\n\t}\n\twb.ValueUpdate() // we update it with the initial value immediately\n\treturn vw\n}")),
		"ButtonAction":                  reflect.ValueOf(core.ButtonAction),
		"ButtonElevated":                reflect.ValueOf(core.ButtonElevated),
		"ButtonFilled":                  reflect.ValueOf(core.ButtonFilled),
		"ButtonMenu":                    reflect.ValueOf(core.ButtonMenu),
		"ButtonOutlined":                reflect.ValueOf(core.ButtonOutlined),
		"ButtonText":                    reflect.ValueOf(core.ButtonText),
		"ButtonTonal":                   reflect.ValueOf(core.ButtonTonal),
		"ButtonTypesN":                  reflect.ValueOf(core.ButtonTypesN),
		"ButtonTypesValues":             reflect.ValueOf(core.ButtonTypesValues),
		"CallFunc":                      reflect.ValueOf(core.CallFunc),
		"ChooserFilled":                 reflect.ValueOf(core.ChooserFilled),
		"ChooserOutlined":               reflect.ValueOf(core.ChooserOutlined),
		"ChooserTypesN":                 reflect.ValueOf(core.ChooserTypesN),
		"ChooserTypesValues":            reflect.ValueOf(core.ChooserTypesValues),
		"CompleteEditText":              reflect.ValueOf(core.CompleteEditText),
		"CompleterStage":                reflect.ValueOf(core.CompleterStage),
		"ConstantSpacing":               reflect.ValueOf(core.ConstantSpacing),
		"DebugSettings":                 reflect.ValueOf(&core.DebugSettings).Elem(),
		"DeviceSettings":                reflect.ValueOf(&core.DeviceSettings).Elem(),
		"DialogStage":                   reflect.ValueOf(core.DialogStage),
		"ErrorDialog":                   reflect.ValueOf(core.ErrorDialog),
		"ErrorSnackbar":                 reflect.ValueOf(core.ErrorSnackbar),
		"ExternalParent":                reflect.ValueOf(&core.ExternalParent).Elem(),
		"FilePickerDirOnlyFilter":       reflect.ValueOf(core.FilePickerDirOnlyFilter),
		"FilePickerExtensionOnlyFilter": reflect.ValueOf(core.FilePickerExtensionOnlyFilter),
		"ForceAppColor":                 reflect.ValueOf(&core.ForceAppColor).Elem(),
		"FunctionalTabs":                reflect.ValueOf(core.FunctionalTabs),
		"HighlightingEditor":            reflect.ValueOf(core.HighlightingEditor),
		"InitValueButton":               reflect.ValueOf(core.InitValueButton),
		"InspectorWindow":               reflect.ValueOf(core.InspectorWindow),
		"LayoutPassesN":                 reflect.ValueOf(core.LayoutPassesN),
		"LayoutPassesValues":            reflect.ValueOf(core.LayoutPassesValues),
		"ListColProperty":               reflect.ValueOf(constant.MakeFromLiteral("\"ls-col\"", token.STRING, 0)),
		"ListRowProperty":               reflect.ValueOf(constant.MakeFromLiteral("\"ls-row\"", token.STRING, 0)),
		"LoadAllSettings":               reflect.ValueOf(core.LoadAllSettings),
		"MenuStage":                     reflect.ValueOf(core.MenuStage),
		"MessageDialog":                 reflect.ValueOf(core.MessageDialog),
		"MessageSnackbar":               reflect.ValueOf(core.MessageSnackbar),
		"MeterCircle":                   reflect.ValueOf(core.MeterCircle),
		"MeterLinear":                   reflect.ValueOf(core.MeterLinear),
		"MeterSemicircle":               reflect.ValueOf(core.MeterSemicircle),
		"MeterTypesN":                   reflect.ValueOf(core.MeterTypesN),
		"MeterTypesValues":              reflect.ValueOf(core.MeterTypesValues),
		"NavigationAuto":                reflect.ValueOf(core.NavigationAuto),
		"NavigationBar":                 reflect.ValueOf(core.NavigationBar),
		"NavigationDrawer":              reflect.ValueOf(core.NavigationDrawer),
		"NewBody":                       reflect.ValueOf(core.NewBody),
		"NewButton":                     reflect.ValueOf(core.NewButton),
		"NewCanvas":                     reflect.ValueOf(core.NewCanvas),
		"NewChooser":                    reflect.ValueOf(core.NewChooser),
		"NewCollapser":                  reflect.ValueOf(core.NewCollapser),
		"NewColorButton":                reflect.ValueOf(core.NewColorButton),
		"NewColorMapButton":             reflect.ValueOf(core.NewColorMapButton),
		"NewColorPicker":                reflect.ValueOf(core.NewColorPicker),
		"NewComplete":                   reflect.ValueOf(core.NewComplete),
		"NewDatePicker":                 reflect.ValueOf(core.NewDatePicker),
		"NewDurationInput":              reflect.ValueOf(core.NewDurationInput),
		"NewFileButton":                 reflect.ValueOf(core.NewFileButton),
		"NewFilePicker":                 reflect.ValueOf(core.NewFilePicker),
		"NewFontButton":                 reflect.ValueOf(core.NewFontButton),
		"NewForm":                       reflect.ValueOf(core.NewForm),
		"NewFormButton":                 reflect.ValueOf(core.NewFormButton),
		"NewFrame":                      reflect.ValueOf(core.NewFrame),
		"NewFuncButton":                 reflect.ValueOf(core.NewFuncButton),
		"NewHandle":                     reflect.ValueOf(core.NewHandle),
		"NewHighlightingButton":         reflect.ValueOf(core.NewHighlightingButton),
		"NewIcon":                       reflect.ValueOf(core.NewIcon),
		"NewIconButton":                 reflect.ValueOf(core.NewIconButton),
		"NewImage":                      reflect.ValueOf(core.NewImage),
		"NewImageSprite":                reflect.ValueOf(core.NewImageSprite),
		"NewInlineList":                 reflect.ValueOf(core.NewInlineList),
		"NewInspector":                  reflect.ValueOf(core.NewInspector),
		"NewKeyChordButton":             reflect.ValueOf(core.NewKeyChordButton),
		"NewKeyMapButton":               reflect.ValueOf(core.NewKeyMapButton),
		"NewKeyedList":                  reflect.ValueOf(core.NewKeyedList),
		"NewKeyedListButton":            reflect.ValueOf(core.NewKeyedListButton),
		"NewList":                       reflect.ValueOf(core.NewList),
		"NewListButton":                 reflect.ValueOf(core.NewListButton),
		"NewMenu":                       reflect.ValueOf(core.NewMenu),
		"NewMenuFromStrings":            reflect.ValueOf(core.NewMenuFromStrings),
		"NewMenuStage":                  reflect.ValueOf(core.NewMenuStage),
		"NewMeter":                      reflect.ValueOf(core.NewMeter),
		"NewPages":                      reflect.ValueOf(core.NewPages),
		"NewPopupStage":                 reflect.ValueOf(core.NewPopupStage),
		"NewSVG":                        reflect.ValueOf(core.NewSVG),
		"NewScene":                      reflect.ValueOf(core.NewScene),
		"NewSeparator":                  reflect.ValueOf(core.NewSeparator),
		"NewSlider":                     reflect.ValueOf(core.NewSlider),
		"NewSoloFuncButton":             reflect.ValueOf(core.NewSoloFuncButton),
		"NewSpace":                      reflect.ValueOf(core.NewSpace),
		"NewSpinner":                    reflect.ValueOf(core.NewSpinner),
		"NewSplits":                     reflect.ValueOf(core.NewSplits),
		"NewSprite":                     reflect.ValueOf(core.NewSprite),
		"NewStretch":                    reflect.ValueOf(core.NewStretch),
		"NewSwitch":                     reflect.ValueOf(core.NewSwitch),
		"NewSwitches":                   reflect.ValueOf(core.NewSwitches),
		"NewTable":                      reflect.ValueOf(core.NewTable),
		"NewTabs":                       reflect.ValueOf(core.NewTabs),
		"NewText":                       reflect.ValueOf(core.NewText),
		"NewTextField":                  reflect.ValueOf(core.NewTextField),
		"NewTimeInput":                  reflect.ValueOf(core.NewTimeInput),
		"NewTimePicker":                 reflect.ValueOf(core.NewTimePicker),
		"NewToolbar":                    reflect.ValueOf(core.NewToolbar),
		"NewTree":                       reflect.ValueOf(core.NewTree),
		"NewTreeButton":                 reflect.ValueOf(core.NewTreeButton),
		"NewTypeChooser":                reflect.ValueOf(core.NewTypeChooser),
		"NewValue":                      reflect.ValueOf(core.NewValue),
		"NewWidgetBase":                 reflect.ValueOf(core.NewWidgetBase),
		"NoSentenceCaseFor":             reflect.ValueOf(&core.NoSentenceCaseFor).Elem(),
		"ProfileToggle":                 reflect.ValueOf(core.ProfileToggle),
		"RecycleDialog":                 reflect.ValueOf(core.RecycleDialog),
		"RecycleMainWindow":             reflect.ValueOf(core.RecycleMainWindow),
		"ResetWidgetValue":              reflect.ValueOf(core.ResetWidgetValue),
		"SaveSettings":                  reflect.ValueOf(core.SaveSettings),
		"SceneSource":                   reflect.ValueOf(core.SceneSource),
		"ScrimSource":                   reflect.ValueOf(core.ScrimSource),
		"SettingsEditor":                reflect.ValueOf(core.SettingsEditor),
		"SettingsWindow":                reflect.ValueOf(core.SettingsWindow),
		"SizeClassesN":                  reflect.ValueOf(core.SizeClassesN),
		"SizeClassesValues":             reflect.ValueOf(core.SizeClassesValues),
		"SizeCompact":                   reflect.ValueOf(core.SizeCompact),
		"SizeDownPass":                  reflect.ValueOf(core.SizeDownPass),
		"SizeExpanded":                  reflect.ValueOf(core.SizeExpanded),
		"SizeFinalPass":                 reflect.ValueOf(core.SizeFinalPass),
		"SizeMedium":                    reflect.ValueOf(core.SizeMedium),
		"SizeUpPass":                    reflect.ValueOf(core.SizeUpPass),
		"SliderScrollbar":               reflect.ValueOf(core.SliderScrollbar),
		"SliderSlider":                  reflect.ValueOf(core.SliderSlider),
		"SliderTypesN":                  reflect.ValueOf(core.SliderTypesN),
		"SliderTypesValues":             reflect.ValueOf(core.SliderTypesValues),
		"SnackbarStage":                 reflect.ValueOf(core.SnackbarStage),
		"SplitsTilesN":                  reflect.ValueOf(core.SplitsTilesN),
		"SplitsTilesValues":             reflect.ValueOf(core.SplitsTilesValues),
		"SpritesSource":                 reflect.ValueOf(core.SpritesSource),
		"StageTypesN":                   reflect.ValueOf(core.StageTypesN),
		"StageTypesValues":              reflect.ValueOf(core.StageTypesValues),
		"StandardTabs":                  reflect.ValueOf(core.StandardTabs),
		"StyleMenuScene":                reflect.ValueOf(core.StyleMenuScene),
		"SwitchCheckbox":                reflect.ValueOf(core.SwitchCheckbox),
		"SwitchChip":                    reflect.ValueOf(core.SwitchChip),
		"SwitchRadioButton":             reflect.ValueOf(core.SwitchRadioButton),
		"SwitchSegmentedButton":         reflect.ValueOf(core.SwitchSegmentedButton),
		"SwitchSwitch":                  reflect.ValueOf(core.SwitchSwitch),
		"SwitchTypesN":                  reflect.ValueOf(core.SwitchTypesN),
		"SwitchTypesValues":             reflect.ValueOf(core.SwitchTypesValues),
		"SystemSettings":                reflect.ValueOf(&core.SystemSettings).Elem(),
		"TabTypesN":                     reflect.ValueOf(core.TabTypesN),
		"TabTypesValues":                reflect.ValueOf(core.TabTypesValues),
		"TextBodyLarge":                 reflect.ValueOf(core.TextBodyLarge),
		"TextBodyMedium":                reflect.ValueOf(core.TextBodyMedium),
		"TextBodySmall":                 reflect.ValueOf(core.TextBodySmall),
		"TextDisplayLarge":              reflect.ValueOf(core.TextDisplayLarge),
		"TextDisplayMedium":             reflect.ValueOf(core.TextDisplayMedium),
		"TextDisplaySmall":              reflect.ValueOf(core.TextDisplaySmall),
		"TextFieldFilled":               reflect.ValueOf(core.TextFieldFilled),
		"TextFieldOutlined":             reflect.ValueOf(core.TextFieldOutlined),
		"TextFieldTypesN":               reflect.ValueOf(core.TextFieldTypesN),
		"TextFieldTypesValues":          reflect.ValueOf(core.TextFieldTypesValues),
		"TextHeadlineLarge":             reflect.ValueOf(core.TextHeadlineLarge),
		"TextHeadlineMedium":            reflect.ValueOf(core.TextHeadlineMedium),
		"TextHeadlineSmall":             reflect.ValueOf(core.TextHeadlineSmall),
		"TextLabelLarge":                reflect.ValueOf(core.TextLabelLarge),
		"TextLabelMedium":               reflect.ValueOf(core.TextLabelMedium),
		"TextLabelSmall":                reflect.ValueOf(core.TextLabelSmall),
		"TextSupporting":                reflect.ValueOf(core.TextSupporting),
		"TextTitleLarge":                reflect.ValueOf(core.TextTitleLarge),
		"TextTitleMedium":               reflect.ValueOf(core.TextTitleMedium),
		"TextTitleSmall":                reflect.ValueOf(core.TextTitleSmall),
		"TextTypesN":                    reflect.ValueOf(core.TextTypesN),
		"TextTypesValues":               reflect.ValueOf(core.TextTypesValues),
		"TheApp":                        reflect.ValueOf(&core.TheApp).Elem(),
		"ThemeAuto":                     reflect.ValueOf(core.ThemeAuto),
		"ThemeDark":                     reflect.ValueOf(core.ThemeDark),
		"ThemeLight":                    reflect.ValueOf(core.ThemeLight),
		"ThemesN":                       reflect.ValueOf(core.ThemesN),
		"ThemesValues":                  reflect.ValueOf(core.ThemesValues),
		"TileFirstLong":                 reflect.ValueOf(core.TileFirstLong),
		"TilePlus":                      reflect.ValueOf(core.TilePlus),
		"TileSecondLong":                reflect.ValueOf(core.TileSecondLong),
		"TileSpan":                      reflect.ValueOf(core.TileSpan),
		"TileSplit":                     reflect.ValueOf(core.TileSplit),
		"ToHTML":                        reflect.ValueOf(core.ToHTML),
		"ToolbarStyles":                 reflect.ValueOf(core.ToolbarStyles),
		"TooltipStage":                  reflect.ValueOf(core.TooltipStage),
		"UpdateAll":                     reflect.ValueOf(core.UpdateAll),
		"UpdateSettings":                reflect.ValueOf(core.UpdateSettings),
		"ValueTypes":                    reflect.ValueOf(&core.ValueTypes).Elem(),
		"Wait":                          reflect.ValueOf(core.Wait),
		"WindowStage":                   reflect.ValueOf(core.WindowStage),

		// type definitions
		"Animation":              reflect.ValueOf((*core.Animation)(nil)),
		"App":                    reflect.ValueOf((*core.App)(nil)),
		"AppearanceSettingsData": reflect.ValueOf((*core.AppearanceSettingsData)(nil)),
		"BarFuncs":               reflect.ValueOf((*core.BarFuncs)(nil)),
		"Body":                   reflect.ValueOf((*core.Body)(nil)),
		"Button":                 reflect.ValueOf((*core.Button)(nil)),
		"ButtonEmbedder":         reflect.ValueOf((*core.ButtonEmbedder)(nil)),
		"ButtonTypes":            reflect.ValueOf((*core.ButtonTypes)(nil)),
		"Canvas":                 reflect.ValueOf((*core.Canvas)(nil)),
		"Chooser":                reflect.ValueOf((*core.Chooser)(nil)),
		"ChooserItem":            reflect.ValueOf((*core.ChooserItem)(nil)),
		"ChooserTypes":           reflect.ValueOf((*core.ChooserTypes)(nil)),
		"Collapser":              reflect.ValueOf((*core.Collapser)(nil)),
		"ColorButton":            reflect.ValueOf((*core.ColorButton)(nil)),
		"ColorMapButton":         reflect.ValueOf((*core.ColorMapButton)(nil)),
		"ColorMapName":           reflect.ValueOf((*core.ColorMapName)(nil)),
		"ColorPicker":            reflect.ValueOf((*core.ColorPicker)(nil)),
		"Complete":               reflect.ValueOf((*core.Complete)(nil)),
		"DatePicker":             reflect.ValueOf((*core.DatePicker)(nil)),
		"DebugSettingsData":      reflect.ValueOf((*core.DebugSettingsData)(nil)),
		"DeviceSettingsData":     reflect.ValueOf((*core.DeviceSettingsData)(nil)),
		"DurationInput":          reflect.ValueOf((*core.DurationInput)(nil)),
		"Events":                 reflect.ValueOf((*core.Events)(nil)),
		"FileButton":             reflect.ValueOf((*core.FileButton)(nil)),
		"FilePaths":              reflect.ValueOf((*core.FilePaths)(nil)),
		"FilePicker":             reflect.ValueOf((*core.FilePicker)(nil)),
		"FilePickerFilterer":     reflect.ValueOf((*core.FilePickerFilterer)(nil)),
		"Filename":               reflect.ValueOf((*core.Filename)(nil)),
		"FontButton":             reflect.ValueOf((*core.FontButton)(nil)),
		"FontName":               reflect.ValueOf((*core.FontName)(nil)),
		"Form":                   reflect.ValueOf((*core.Form)(nil)),
		"FormButton":             reflect.ValueOf((*core.FormButton)(nil)),
		"Frame":                  reflect.ValueOf((*core.Frame)(nil)),
		"FuncArg":                reflect.ValueOf((*core.FuncArg)(nil)),
		"FuncButton":             reflect.ValueOf((*core.FuncButton)(nil)),
		"Handle":                 reflect.ValueOf((*core.Handle)(nil)),
		"HighlightingButton":     reflect.ValueOf((*core.HighlightingButton)(nil)),
		"HighlightingName":       reflect.ValueOf((*core.HighlightingName)(nil)),
		"Icon":                   reflect.ValueOf((*core.Icon)(nil)),
		"IconButton":             reflect.ValueOf((*core.IconButton)(nil)),
		"Image":                  reflect.ValueOf((*core.Image)(nil)),
		"InlineList":             reflect.ValueOf((*core.InlineList)(nil)),
		"Inspector":              reflect.ValueOf((*core.Inspector)(nil)),
		"KeyChordButton":         reflect.ValueOf((*core.KeyChordButton)(nil)),
		"KeyMapButton":           reflect.ValueOf((*core.KeyMapButton)(nil)),
		"KeyedList":              reflect.ValueOf((*core.KeyedList)(nil)),
		"KeyedListButton":        reflect.ValueOf((*core.KeyedListButton)(nil)),
		"LayoutPasses":           reflect.ValueOf((*core.LayoutPasses)(nil)),
		"Layouter":               reflect.ValueOf((*core.Layouter)(nil)),
		"List":                   reflect.ValueOf((*core.List)(nil)),
		"ListBase":               reflect.ValueOf((*core.ListBase)(nil)),
		"ListButton":             reflect.ValueOf((*core.ListButton)(nil)),
		"ListGrid":               reflect.ValueOf((*core.ListGrid)(nil)),
		"ListStyler":             reflect.ValueOf((*core.ListStyler)(nil)),
		"Lister":                 reflect.ValueOf((*core.Lister)(nil)),
		"MenuSearcher":           reflect.ValueOf((*core.MenuSearcher)(nil)),
		"Meter":                  reflect.ValueOf((*core.Meter)(nil)),
		"MeterTypes":             reflect.ValueOf((*core.MeterTypes)(nil)),
		"OnBinder":               reflect.ValueOf((*core.OnBinder)(nil)),
		"Pages":                  reflect.ValueOf((*core.Pages)(nil)),
		"SVG":                    reflect.ValueOf((*core.SVG)(nil)),
		"Scene":                  reflect.ValueOf((*core.Scene)(nil)),
		"ScreenSettings":         reflect.ValueOf((*core.ScreenSettings)(nil)),
		"Separator":              reflect.ValueOf((*core.Separator)(nil)),
		"Settings":               reflect.ValueOf((*core.Settings)(nil)),
		"SettingsBase":           reflect.ValueOf((*core.SettingsBase)(nil)),
		"SettingsOpener":         reflect.ValueOf((*core.SettingsOpener)(nil)),
		"SettingsSaver":          reflect.ValueOf((*core.SettingsSaver)(nil)),
		"ShouldDisplayer":        reflect.ValueOf((*core.ShouldDisplayer)(nil)),
		"SizeClasses":            reflect.ValueOf((*core.SizeClasses)(nil)),
		"Slider":                 reflect.ValueOf((*core.Slider)(nil)),
		"SliderTypes":            reflect.ValueOf((*core.SliderTypes)(nil)),
		"Space":                  reflect.ValueOf((*core.Space)(nil)),
		"Spinner":                reflect.ValueOf((*core.Spinner)(nil)),
		"Splits":                 reflect.ValueOf((*core.Splits)(nil)),
		"SplitsTiles":            reflect.ValueOf((*core.SplitsTiles)(nil)),
		"Sprite":                 reflect.ValueOf((*core.Sprite)(nil)),
		"Sprites":                reflect.ValueOf((*core.Sprites)(nil)),
		"Stage":                  reflect.ValueOf((*core.Stage)(nil)),
		"StageTypes":             reflect.ValueOf((*core.StageTypes)(nil)),
		"Stretch":                reflect.ValueOf((*core.Stretch)(nil)),
		"Switch":                 reflect.ValueOf((*core.Switch)(nil)),
		"SwitchItem":             reflect.ValueOf((*core.SwitchItem)(nil)),
		"SwitchTypes":            reflect.ValueOf((*core.SwitchTypes)(nil)),
		"Switches":               reflect.ValueOf((*core.Switches)(nil)),
		"SystemSettingsData":     reflect.ValueOf((*core.SystemSettingsData)(nil)),
		"Tab":                    reflect.ValueOf((*core.Tab)(nil)),
		"TabTypes":               reflect.ValueOf((*core.TabTypes)(nil)),
		"Tabber":                 reflect.ValueOf((*core.Tabber)(nil)),
		"Table":                  reflect.ValueOf((*core.Table)(nil)),
		"TableStyler":            reflect.ValueOf((*core.TableStyler)(nil)),
		"Tabs":                   reflect.ValueOf((*core.Tabs)(nil)),
		"Text":                   reflect.ValueOf((*core.Text)(nil)),
		"TextField":              reflect.ValueOf((*core.TextField)(nil)),
		"TextFieldEmbedder":      reflect.ValueOf((*core.TextFieldEmbedder)(nil)),
		"TextFieldTypes":         reflect.ValueOf((*core.TextFieldTypes)(nil)),
		"TextTypes":              reflect.ValueOf((*core.TextTypes)(nil)),
		"Themes":                 reflect.ValueOf((*core.Themes)(nil)),
		"TimeInput":              reflect.ValueOf((*core.TimeInput)(nil)),
		"TimePicker":             reflect.ValueOf((*core.TimePicker)(nil)),
		"Toolbar":                reflect.ValueOf((*core.Toolbar)(nil)),
		"ToolbarMaker":           reflect.ValueOf((*core.ToolbarMaker)(nil)),
		"Tree":                   reflect.ValueOf((*core.Tree)(nil)),
		"TreeButton":             reflect.ValueOf((*core.TreeButton)(nil)),
		"Treer":                  reflect.ValueOf((*core.Treer)(nil)),
		"TypeChooser":            reflect.ValueOf((*core.TypeChooser)(nil)),
		"User":                   reflect.ValueOf((*core.User)(nil)),
		"Validator":              reflect.ValueOf((*core.Validator)(nil)),
		"Value":                  reflect.ValueOf((*core.Value)(nil)),
		"ValueSetter":            reflect.ValueOf((*core.ValueSetter)(nil)),
		"Valuer":                 reflect.ValueOf((*core.Valuer)(nil)),
		"Widget":                 reflect.ValueOf((*core.Widget)(nil)),
		"WidgetBase":             reflect.ValueOf((*core.WidgetBase)(nil)),

		// interface wrapper definitions
		"_ButtonEmbedder":    reflect.ValueOf((*_cogentcore_org_core_core_ButtonEmbedder)(nil)),
		"_Layouter":          reflect.ValueOf((*_cogentcore_org_core_core_Layouter)(nil)),
		"_Lister":            reflect.ValueOf((*_cogentcore_org_core_core_Lister)(nil)),
		"_MenuSearcher":      reflect.ValueOf((*_cogentcore_org_core_core_MenuSearcher)(nil)),
		"_OnBinder":          reflect.ValueOf((*_cogentcore_org_core_core_OnBinder)(nil)),
		"_Settings":          reflect.ValueOf((*_cogentcore_org_core_core_Settings)(nil)),
		"_SettingsOpener":    reflect.ValueOf((*_cogentcore_org_core_core_SettingsOpener)(nil)),
		"_SettingsSaver":     reflect.ValueOf((*_cogentcore_org_core_core_SettingsSaver)(nil)),
		"_ShouldDisplayer":   reflect.ValueOf((*_cogentcore_org_core_core_ShouldDisplayer)(nil)),
		"_Tabber":            reflect.ValueOf((*_cogentcore_org_core_core_Tabber)(nil)),
		"_TextFieldEmbedder": reflect.ValueOf((*_cogentcore_org_core_core_TextFieldEmbedder)(nil)),
		"_ToolbarMaker":      reflect.ValueOf((*_cogentcore_org_core_core_ToolbarMaker)(nil)),
		"_Treer":             reflect.ValueOf((*_cogentcore_org_core_core_Treer)(nil)),
		"_Validator":         reflect.ValueOf((*_cogentcore_org_core_core_Validator)(nil)),
		"_Value":             reflect.ValueOf((*_cogentcore_org_core_core_Value)(nil)),
		"_ValueSetter":       reflect.ValueOf((*_cogentcore_org_core_core_ValueSetter)(nil)),
		"_Valuer":            reflect.ValueOf((*_cogentcore_org_core_core_Valuer)(nil)),
		"_Widget":            reflect.ValueOf((*_cogentcore_org_core_core_Widget)(nil)),
	}
}

// _cogentcore_org_core_core_ButtonEmbedder is an interface wrapper for ButtonEmbedder type
type _cogentcore_org_core_core_ButtonEmbedder struct {
	IValue    interface{}
	WAsButton func() *core.Button
}

func (W _cogentcore_org_core_core_ButtonEmbedder) AsButton() *core.Button { return W.WAsButton() }

// _cogentcore_org_core_core_Layouter is an interface wrapper for Layouter type
type _cogentcore_org_core_core_Layouter struct {
	IValue             interface{}
	WApplyScenePos     func()
	WAsFrame           func() *core.Frame
	WAsTree            func() *tree.NodeBase
	WAsWidget          func() *core.WidgetBase
	WChildBackground   func(child core.Widget) image.Image
	WContextMenuPos    func(e events.Event) image.Point
	WCopyFieldsFrom    func(from tree.Node)
	WDestroy           func()
	WInit              func()
	WLayoutSpace       func()
	WManageOverflow    func(iter int, updateSize bool) bool
	WNodeWalkDown      func(fun func(n tree.Node) bool)
	WOnAdd             func()
	WPlanName          func() string
	WPosition          func()
	WRender            func()
	WRenderSource      func(op draw.Op) composer.Source
	WRenderWidget      func()
	WScrollChanged     func(d math32.Dims, sb *core.Slider)
	WScrollGeom        func(d math32.Dims) (pos math32.Vector2, sz math32.Vector2)
	WScrollValues      func(d math32.Dims) (maxSize float32, visSize float32, visPct float32)
	WSetScrollParams   func(d math32.Dims, sb *core.Slider)
	WShowContextMenu   func(e events.Event)
	WSizeDown          func(iter int) bool
	WSizeDownSetAllocs func(iter int)
	WSizeFinal         func()
	WSizeFromChildren  func(iter int, pass core.LayoutPasses) math32.Vector2
	WSizeUp            func()
	WStyle             func()
	WWidgetTooltip     func(pos image.Point) (string, image.Point)
}

func (W _cogentcore_org_core_core_Layouter) ApplyScenePos()             { W.WApplyScenePos() }
func (W _cogentcore_org_core_core_Layouter) AsFrame() *core.Frame       { return W.WAsFrame() }
func (W _cogentcore_org_core_core_Layouter) AsTree() *tree.NodeBase     { return W.WAsTree() }
func (W _cogentcore_org_core_core_Layouter) AsWidget() *core.WidgetBase { return W.WAsWidget() }
func (W _cogentcore_org_core_core_Layouter) ChildBackground(child core.Widget) image.Image {
	return W.WChildBackground(child)
}
func (W _cogentcore_org_core_core_Layouter) ContextMenuPos(e events.Event) image.Point {
	return W.WContextMenuPos(e)
}
func (W _cogentcore_org_core_core_Layouter) CopyFieldsFrom(from tree.Node) { W.WCopyFieldsFrom(from) }
func (W _cogentcore_org_core_core_Layouter) Destroy()                      { W.WDestroy() }
func (W _cogentcore_org_core_core_Layouter) Init()                         { W.WInit() }
func (W _cogentcore_org_core_core_Layouter) LayoutSpace()                  { W.WLayoutSpace() }
func (W _cogentcore_org_core_core_Layouter) ManageOverflow(iter int, updateSize bool) bool {
	return W.WManageOverflow(iter, updateSize)
}
func (W _cogentcore_org_core_core_Layouter) NodeWalkDown(fun func(n tree.Node) bool) {
	W.WNodeWalkDown(fun)
}
func (W _cogentcore_org_core_core_Layouter) OnAdd()           { W.WOnAdd() }
func (W _cogentcore_org_core_core_Layouter) PlanName() string { return W.WPlanName() }
func (W _cogentcore_org_core_core_Layouter) Position()        { W.WPosition() }
func (W _cogentcore_org_core_core_Layouter) Render()          { W.WRender() }
func (W _cogentcore_org_core_core_Layouter) RenderSource(op draw.Op) composer.Source {
	return W.WRenderSource(op)
}
func (W _cogentcore_org_core_core_Layouter) RenderWidget() { W.WRenderWidget() }
func (W _cogentcore_org_core_core_Layouter) ScrollChanged(d math32.Dims, sb *core.Slider) {
	W.WScrollChanged(d, sb)
}
func (W _cogentcore_org_core_core_Layouter) ScrollGeom(d math32.Dims) (pos math32.Vector2, sz math32.Vector2) {
	return W.WScrollGeom(d)
}
func (W _cogentcore_org_core_core_Layouter) ScrollValues(d math32.Dims) (maxSize float32, visSize float32, visPct float32) {
	return W.WScrollValues(d)
}
func (W _cogentcore_org_core_core_Layouter) SetScrollParams(d math32.Dims, sb *core.Slider) {
	W.WSetScrollParams(d, sb)
}
func (W _cogentcore_org_core_core_Layouter) ShowContextMenu(e events.Event) { W.WShowContextMenu(e) }
func (W _cogentcore_org_core_core_Layouter) SizeDown(iter int) bool         { return W.WSizeDown(iter) }
func (W _cogentcore_org_core_core_Layouter) SizeDownSetAllocs(iter int)     { W.WSizeDownSetAllocs(iter) }
func (W _cogentcore_org_core_core_Layouter) SizeFinal()                     { W.WSizeFinal() }
func (W _cogentcore_org_core_core_Layouter) SizeFromChildren(iter int, pass core.LayoutPasses) math32.Vector2 {
	return W.WSizeFromChildren(iter, pass)
}
func (W _cogentcore_org_core_core_Layouter) SizeUp() { W.WSizeUp() }
func (W _cogentcore_org_core_core_Layouter) Style()  { W.WStyle() }
func (W _cogentcore_org_core_core_Layouter) WidgetTooltip(pos image.Point) (string, image.Point) {
	return W.WWidgetTooltip(pos)
}

// _cogentcore_org_core_core_Lister is an interface wrapper for Lister type
type _cogentcore_org_core_core_Lister struct {
	IValue            interface{}
	WAsListBase       func() *core.ListBase
	WAsTree           func() *tree.NodeBase
	WCopyFieldsFrom   func(from tree.Node)
	WCopySelectToMime func() mimedata.Mimes
	WDeleteAt         func(idx int)
	WDestroy          func()
	WHasStyler        func() bool
	WInit             func()
	WMakeRow          func(p *tree.Plan, i int)
	WMimeDataType     func() string
	WNewAt            func(idx int)
	WNodeWalkDown     func(fun func(n tree.Node) bool)
	WOnAdd            func()
	WPasteAssign      func(md mimedata.Mimes, idx int)
	WPasteAtIndex     func(md mimedata.Mimes, idx int)
	WPlanName         func() string
	WRowGrabFocus     func(row int) *core.WidgetBase
	WRowWidgetNs      func() (nWidgPerRow int, idxOff int)
	WSliceIndex       func(i int) (si int, vi int, invis bool)
	WStyleRow         func(w core.Widget, idx int, fidx int)
	WStyleValue       func(w core.Widget, s *styles.Style, row int, col int)
	WUpdateMaxWidths  func()
	WUpdateSliceSize  func() int
}

func (W _cogentcore_org_core_core_Lister) AsListBase() *core.ListBase    { return W.WAsListBase() }
func (W _cogentcore_org_core_core_Lister) AsTree() *tree.NodeBase        { return W.WAsTree() }
func (W _cogentcore_org_core_core_Lister) CopyFieldsFrom(from tree.Node) { W.WCopyFieldsFrom(from) }
func (W _cogentcore_org_core_core_Lister) CopySelectToMime() mimedata.Mimes {
	return W.WCopySelectToMime()
}
func (W _cogentcore_org_core_core_Lister) DeleteAt(idx int)            { W.WDeleteAt(idx) }
func (W _cogentcore_org_core_core_Lister) Destroy()                    { W.WDestroy() }
func (W _cogentcore_org_core_core_Lister) HasStyler() bool             { return W.WHasStyler() }
func (W _cogentcore_org_core_core_Lister) Init()                       { W.WInit() }
func (W _cogentcore_org_core_core_Lister) MakeRow(p *tree.Plan, i int) { W.WMakeRow(p, i) }
func (W _cogentcore_org_core_core_Lister) MimeDataType() string        { return W.WMimeDataType() }
func (W _cogentcore_org_core_core_Lister) NewAt(idx int)               { W.WNewAt(idx) }
func (W _cogentcore_org_core_core_Lister) NodeWalkDown(fun func(n tree.Node) bool) {
	W.WNodeWalkDown(fun)
}
func (W _cogentcore_org_core_core_Lister) OnAdd() { W.WOnAdd() }
func (W _cogentcore_org_core_core_Lister) PasteAssign(md mimedata.Mimes, idx int) {
	W.WPasteAssign(md, idx)
}
func (W _cogentcore_org_core_core_Lister) PasteAtIndex(md mimedata.Mimes, idx int) {
	W.WPasteAtIndex(md, idx)
}
func (W _cogentcore_org_core_core_Lister) PlanName() string { return W.WPlanName() }
func (W _cogentcore_org_core_core_Lister) RowGrabFocus(row int) *core.WidgetBase {
	return W.WRowGrabFocus(row)
}
func (W _cogentcore_org_core_core_Lister) RowWidgetNs() (nWidgPerRow int, idxOff int) {
	return W.WRowWidgetNs()
}
func (W _cogentcore_org_core_core_Lister) SliceIndex(i int) (si int, vi int, invis bool) {
	return W.WSliceIndex(i)
}
func (W _cogentcore_org_core_core_Lister) StyleRow(w core.Widget, idx int, fidx int) {
	W.WStyleRow(w, idx, fidx)
}
func (W _cogentcore_org_core_core_Lister) StyleValue(w core.Widget, s *styles.Style, row int, col int) {
	W.WStyleValue(w, s, row, col)
}
func (W _cogentcore_org_core_core_Lister) UpdateMaxWidths()     { W.WUpdateMaxWidths() }
func (W _cogentcore_org_core_core_Lister) UpdateSliceSize() int { return W.WUpdateSliceSize() }

// _cogentcore_org_core_core_MenuSearcher is an interface wrapper for MenuSearcher type
type _cogentcore_org_core_core_MenuSearcher struct {
	IValue      interface{}
	WMenuSearch func(items *[]core.ChooserItem)
}

func (W _cogentcore_org_core_core_MenuSearcher) MenuSearch(items *[]core.ChooserItem) {
	W.WMenuSearch(items)
}

// _cogentcore_org_core_core_OnBinder is an interface wrapper for OnBinder type
type _cogentcore_org_core_core_OnBinder struct {
	IValue  interface{}
	WOnBind func(value any, tags reflect.StructTag)
}

func (W _cogentcore_org_core_core_OnBinder) OnBind(value any, tags reflect.StructTag) {
	W.WOnBind(value, tags)
}

// _cogentcore_org_core_core_Settings is an interface wrapper for Settings type
type _cogentcore_org_core_core_Settings struct {
	IValue       interface{}
	WApply       func()
	WDefaults    func()
	WFilename    func() string
	WLabel       func() string
	WMakeToolbar func(p *tree.Plan)
}

func (W _cogentcore_org_core_core_Settings) Apply()                   { W.WApply() }
func (W _cogentcore_org_core_core_Settings) Defaults()                { W.WDefaults() }
func (W _cogentcore_org_core_core_Settings) Filename() string         { return W.WFilename() }
func (W _cogentcore_org_core_core_Settings) Label() string            { return W.WLabel() }
func (W _cogentcore_org_core_core_Settings) MakeToolbar(p *tree.Plan) { W.WMakeToolbar(p) }

// _cogentcore_org_core_core_SettingsOpener is an interface wrapper for SettingsOpener type
type _cogentcore_org_core_core_SettingsOpener struct {
	IValue       interface{}
	WApply       func()
	WDefaults    func()
	WFilename    func() string
	WLabel       func() string
	WMakeToolbar func(p *tree.Plan)
	WOpen        func() error
}

func (W _cogentcore_org_core_core_SettingsOpener) Apply()                   { W.WApply() }
func (W _cogentcore_org_core_core_SettingsOpener) Defaults()                { W.WDefaults() }
func (W _cogentcore_org_core_core_SettingsOpener) Filename() string         { return W.WFilename() }
func (W _cogentcore_org_core_core_SettingsOpener) Label() string            { return W.WLabel() }
func (W _cogentcore_org_core_core_SettingsOpener) MakeToolbar(p *tree.Plan) { W.WMakeToolbar(p) }
func (W _cogentcore_org_core_core_SettingsOpener) Open() error              { return W.WOpen() }

// _cogentcore_org_core_core_SettingsSaver is an interface wrapper for SettingsSaver type
type _cogentcore_org_core_core_SettingsSaver struct {
	IValue       interface{}
	WApply       func()
	WDefaults    func()
	WFilename    func() string
	WLabel       func() string
	WMakeToolbar func(p *tree.Plan)
	WSave        func() error
}

func (W _cogentcore_org_core_core_SettingsSaver) Apply()                   { W.WApply() }
func (W _cogentcore_org_core_core_SettingsSaver) Defaults()                { W.WDefaults() }
func (W _cogentcore_org_core_core_SettingsSaver) Filename() string         { return W.WFilename() }
func (W _cogentcore_org_core_core_SettingsSaver) Label() string            { return W.WLabel() }
func (W _cogentcore_org_core_core_SettingsSaver) MakeToolbar(p *tree.Plan) { W.WMakeToolbar(p) }
func (W _cogentcore_org_core_core_SettingsSaver) Save() error              { return W.WSave() }

// _cogentcore_org_core_core_ShouldDisplayer is an interface wrapper for ShouldDisplayer type
type _cogentcore_org_core_core_ShouldDisplayer struct {
	IValue         interface{}
	WShouldDisplay func(field string) bool
}

func (W _cogentcore_org_core_core_ShouldDisplayer) ShouldDisplay(field string) bool {
	return W.WShouldDisplay(field)
}

// _cogentcore_org_core_core_Tabber is an interface wrapper for Tabber type
type _cogentcore_org_core_core_Tabber struct {
	IValue      interface{}
	WAsCoreTabs func() *core.Tabs
}

func (W _cogentcore_org_core_core_Tabber) AsCoreTabs() *core.Tabs { return W.WAsCoreTabs() }

// _cogentcore_org_core_core_TextFieldEmbedder is an interface wrapper for TextFieldEmbedder type
type _cogentcore_org_core_core_TextFieldEmbedder struct {
	IValue       interface{}
	WAsTextField func() *core.TextField
}

func (W _cogentcore_org_core_core_TextFieldEmbedder) AsTextField() *core.TextField {
	return W.WAsTextField()
}

// _cogentcore_org_core_core_ToolbarMaker is an interface wrapper for ToolbarMaker type
type _cogentcore_org_core_core_ToolbarMaker struct {
	IValue       interface{}
	WMakeToolbar func(p *tree.Plan)
}

func (W _cogentcore_org_core_core_ToolbarMaker) MakeToolbar(p *tree.Plan) { W.WMakeToolbar(p) }

// _cogentcore_org_core_core_Treer is an interface wrapper for Treer type
type _cogentcore_org_core_core_Treer struct {
	IValue            interface{}
	WApplyScenePos    func()
	WAsCoreTree       func() *core.Tree
	WAsTree           func() *tree.NodeBase
	WAsWidget         func() *core.WidgetBase
	WCanOpen          func() bool
	WChildBackground  func(child core.Widget) image.Image
	WContextMenuPos   func(e events.Event) image.Point
	WCopy             func()
	WCopyFieldsFrom   func(from tree.Node)
	WCut              func()
	WDeleteSelected   func()
	WDestroy          func()
	WDragDrop         func(e events.Event)
	WDropDeleteSource func(e events.Event)
	WInit             func()
	WMimeData         func(md *mimedata.Mimes)
	WNodeWalkDown     func(fun func(n tree.Node) bool)
	WOnAdd            func()
	WOnClose          func()
	WOnOpen           func()
	WPaste            func()
	WPlanName         func() string
	WPosition         func()
	WRender           func()
	WRenderSource     func(op draw.Op) composer.Source
	WRenderWidget     func()
	WShowContextMenu  func(e events.Event)
	WSizeDown         func(iter int) bool
	WSizeFinal        func()
	WSizeUp           func()
	WStyle            func()
	WWidgetTooltip    func(pos image.Point) (string, image.Point)
}

func (W _cogentcore_org_core_core_Treer) ApplyScenePos()             { W.WApplyScenePos() }
func (W _cogentcore_org_core_core_Treer) AsCoreTree() *core.Tree     { return W.WAsCoreTree() }
func (W _cogentcore_org_core_core_Treer) AsTree() *tree.NodeBase     { return W.WAsTree() }
func (W _cogentcore_org_core_core_Treer) AsWidget() *core.WidgetBase { return W.WAsWidget() }
func (W _cogentcore_org_core_core_Treer) CanOpen() bool              { return W.WCanOpen() }
func (W _cogentcore_org_core_core_Treer) ChildBackground(child core.Widget) image.Image {
	return W.WChildBackground(child)
}
func (W _cogentcore_org_core_core_Treer) ContextMenuPos(e events.Event) image.Point {
	return W.WContextMenuPos(e)
}
func (W _cogentcore_org_core_core_Treer) Copy()                           { W.WCopy() }
func (W _cogentcore_org_core_core_Treer) CopyFieldsFrom(from tree.Node)   { W.WCopyFieldsFrom(from) }
func (W _cogentcore_org_core_core_Treer) Cut()                            { W.WCut() }
func (W _cogentcore_org_core_core_Treer) DeleteSelected()                 { W.WDeleteSelected() }
func (W _cogentcore_org_core_core_Treer) Destroy()                        { W.WDestroy() }
func (W _cogentcore_org_core_core_Treer) DragDrop(e events.Event)         { W.WDragDrop(e) }
func (W _cogentcore_org_core_core_Treer) DropDeleteSource(e events.Event) { W.WDropDeleteSource(e) }
func (W _cogentcore_org_core_core_Treer) Init()                           { W.WInit() }
func (W _cogentcore_org_core_core_Treer) MimeData(md *mimedata.Mimes)     { W.WMimeData(md) }
func (W _cogentcore_org_core_core_Treer) NodeWalkDown(fun func(n tree.Node) bool) {
	W.WNodeWalkDown(fun)
}
func (W _cogentcore_org_core_core_Treer) OnAdd()           { W.WOnAdd() }
func (W _cogentcore_org_core_core_Treer) OnClose()         { W.WOnClose() }
func (W _cogentcore_org_core_core_Treer) OnOpen()          { W.WOnOpen() }
func (W _cogentcore_org_core_core_Treer) Paste()           { W.WPaste() }
func (W _cogentcore_org_core_core_Treer) PlanName() string { return W.WPlanName() }
func (W _cogentcore_org_core_core_Treer) Position()        { W.WPosition() }
func (W _cogentcore_org_core_core_Treer) Render()          { W.WRender() }
func (W _cogentcore_org_core_core_Treer) RenderSource(op draw.Op) composer.Source {
	return W.WRenderSource(op)
}
func (W _cogentcore_org_core_core_Treer) RenderWidget()                  { W.WRenderWidget() }
func (W _cogentcore_org_core_core_Treer) ShowContextMenu(e events.Event) { W.WShowContextMenu(e) }
func (W _cogentcore_org_core_core_Treer) SizeDown(iter int) bool         { return W.WSizeDown(iter) }
func (W _cogentcore_org_core_core_Treer) SizeFinal()                     { W.WSizeFinal() }
func (W _cogentcore_org_core_core_Treer) SizeUp()                        { W.WSizeUp() }
func (W _cogentcore_org_core_core_Treer) Style()                         { W.WStyle() }
func (W _cogentcore_org_core_core_Treer) WidgetTooltip(pos image.Point) (string, image.Point) {
	return W.WWidgetTooltip(pos)
}

// _cogentcore_org_core_core_Validator is an interface wrapper for Validator type
type _cogentcore_org_core_core_Validator struct {
	IValue    interface{}
	WValidate func() error
}

func (W _cogentcore_org_core_core_Validator) Validate() error { return W.WValidate() }

// _cogentcore_org_core_core_Value is an interface wrapper for Value type
type _cogentcore_org_core_core_Value struct {
	IValue           interface{}
	WApplyScenePos   func()
	WAsTree          func() *tree.NodeBase
	WAsWidget        func() *core.WidgetBase
	WChildBackground func(child core.Widget) image.Image
	WContextMenuPos  func(e events.Event) image.Point
	WCopyFieldsFrom  func(from tree.Node)
	WDestroy         func()
	WInit            func()
	WNodeWalkDown    func(fun func(n tree.Node) bool)
	WOnAdd           func()
	WPlanName        func() string
	WPosition        func()
	WRender          func()
	WRenderSource    func(op draw.Op) composer.Source
	WRenderWidget    func()
	WShowContextMenu func(e events.Event)
	WSizeDown        func(iter int) bool
	WSizeFinal       func()
	WSizeUp          func()
	WStyle           func()
	WWidgetTooltip   func(pos image.Point) (string, image.Point)
	WWidgetValue     func() any
}

func (W _cogentcore_org_core_core_Value) ApplyScenePos()             { W.WApplyScenePos() }
func (W _cogentcore_org_core_core_Value) AsTree() *tree.NodeBase     { return W.WAsTree() }
func (W _cogentcore_org_core_core_Value) AsWidget() *core.WidgetBase { return W.WAsWidget() }
func (W _cogentcore_org_core_core_Value) ChildBackground(child core.Widget) image.Image {
	return W.WChildBackground(child)
}
func (W _cogentcore_org_core_core_Value) ContextMenuPos(e events.Event) image.Point {
	return W.WContextMenuPos(e)
}
func (W _cogentcore_org_core_core_Value) CopyFieldsFrom(from tree.Node) { W.WCopyFieldsFrom(from) }
func (W _cogentcore_org_core_core_Value) Destroy()                      { W.WDestroy() }
func (W _cogentcore_org_core_core_Value) Init()                         { W.WInit() }
func (W _cogentcore_org_core_core_Value) NodeWalkDown(fun func(n tree.Node) bool) {
	W.WNodeWalkDown(fun)
}
func (W _cogentcore_org_core_core_Value) OnAdd()           { W.WOnAdd() }
func (W _cogentcore_org_core_core_Value) PlanName() string { return W.WPlanName() }
func (W _cogentcore_org_core_core_Value) Position()        { W.WPosition() }
func (W _cogentcore_org_core_core_Value) Render()          { W.WRender() }
func (W _cogentcore_org_core_core_Value) RenderSource(op draw.Op) composer.Source {
	return W.WRenderSource(op)
}
func (W _cogentcore_org_core_core_Value) RenderWidget()                  { W.WRenderWidget() }
func (W _cogentcore_org_core_core_Value) ShowContextMenu(e events.Event) { W.WShowContextMenu(e) }
func (W _cogentcore_org_core_core_Value) SizeDown(iter int) bool         { return W.WSizeDown(iter) }
func (W _cogentcore_org_core_core_Value) SizeFinal()                     { W.WSizeFinal() }
func (W _cogentcore_org_core_core_Value) SizeUp()                        { W.WSizeUp() }
func (W _cogentcore_org_core_core_Value) Style()                         { W.WStyle() }
func (W _cogentcore_org_core_core_Value) WidgetTooltip(pos image.Point) (string, image.Point) {
	return W.WWidgetTooltip(pos)
}
func (W _cogentcore_org_core_core_Value) WidgetValue() any { return W.WWidgetValue() }

// _cogentcore_org_core_core_ValueSetter is an interface wrapper for ValueSetter type
type _cogentcore_org_core_core_ValueSetter struct {
	IValue          interface{}
	WSetWidgetValue func(value any) error
}

func (W _cogentcore_org_core_core_ValueSetter) SetWidgetValue(value any) error {
	return W.WSetWidgetValue(value)
}

// _cogentcore_org_core_core_Valuer is an interface wrapper for Valuer type
type _cogentcore_org_core_core_Valuer struct {
	IValue interface{}
	WValue func() core.Value
}

func (W _cogentcore_org_core_core_Valuer) Value() core.Value { return W.WValue() }

// _cogentcore_org_core_core_Widget is an interface wrapper for Widget type
type _cogentcore_org_core_core_Widget struct {
	IValue           interface{}
	WApplyScenePos   func()
	WAsTree          func() *tree.NodeBase
	WAsWidget        func() *core.WidgetBase
	WChildBackground func(child core.Widget) image.Image
	WContextMenuPos  func(e events.Event) image.Point
	WCopyFieldsFrom  func(from tree.Node)
	WDestroy         func()
	WInit            func()
	WNodeWalkDown    func(fun func(n tree.Node) bool)
	WOnAdd           func()
	WPlanName        func() string
	WPosition        func()
	WRender          func()
	WRenderSource    func(op draw.Op) composer.Source
	WRenderWidget    func()
	WShowContextMenu func(e events.Event)
	WSizeDown        func(iter int) bool
	WSizeFinal       func()
	WSizeUp          func()
	WStyle           func()
	WWidgetTooltip   func(pos image.Point) (string, image.Point)
}

func (W _cogentcore_org_core_core_Widget) ApplyScenePos()             { W.WApplyScenePos() }
func (W _cogentcore_org_core_core_Widget) AsTree() *tree.NodeBase     { return W.WAsTree() }
func (W _cogentcore_org_core_core_Widget) AsWidget() *core.WidgetBase { return W.WAsWidget() }
func (W _cogentcore_org_core_core_Widget) ChildBackground(child core.Widget) image.Image {
	return W.WChildBackground(child)
}
func (W _cogentcore_org_core_core_Widget) ContextMenuPos(e events.Event) image.Point {
	return W.WContextMenuPos(e)
}
func (W _cogentcore_org_core_core_Widget) CopyFieldsFrom(from tree.Node) { W.WCopyFieldsFrom(from) }
func (W _cogentcore_org_core_core_Widget) Destroy()                      { W.WDestroy() }
func (W _cogentcore_org_core_core_Widget) Init()                         { W.WInit() }
func (W _cogentcore_org_core_core_Widget) NodeWalkDown(fun func(n tree.Node) bool) {
	W.WNodeWalkDown(fun)
}
func (W _cogentcore_org_core_core_Widget) OnAdd()           { W.WOnAdd() }
func (W _cogentcore_org_core_core_Widget) PlanName() string { return W.WPlanName() }
func (W _cogentcore_org_core_core_Widget) Position()        { W.WPosition() }
func (W _cogentcore_org_core_core_Widget) Render()          { W.WRender() }
func (W _cogentcore_org_core_core_Widget) RenderSource(op draw.Op) composer.Source {
	return W.WRenderSource(op)
}
func (W _cogentcore_org_core_core_Widget) RenderWidget()                  { W.WRenderWidget() }
func (W _cogentcore_org_core_core_Widget) ShowContextMenu(e events.Event) { W.WShowContextMenu(e) }
func (W _cogentcore_org_core_core_Widget) SizeDown(iter int) bool         { return W.WSizeDown(iter) }
func (W _cogentcore_org_core_core_Widget) SizeFinal()                     { W.WSizeFinal() }
func (W _cogentcore_org_core_core_Widget) SizeUp()                        { W.WSizeUp() }
func (W _cogentcore_org_core_core_Widget) Style()                         { W.WStyle() }
func (W _cogentcore_org_core_core_Widget) WidgetTooltip(pos image.Point) (string, image.Point) {
	return W.WWidgetTooltip(pos)
}
