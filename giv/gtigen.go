// Code generated by "core generate"; DO NOT EDIT.

package giv

import (
	"reflect"
	"sync"

	"cogentcore.org/core/events/key"
	"cogentcore.org/core/fi"
	"cogentcore.org/core/gi"
	"cogentcore.org/core/gti"
	"cogentcore.org/core/icons"
	"cogentcore.org/core/ki"
	"cogentcore.org/core/mat32"
	"cogentcore.org/core/units"
)

// ArgViewType is the [gti.Type] for [ArgView]
var ArgViewType = gti.AddType(&gti.Type{Name: "cogentcore.org/core/giv.ArgView", IDName: "arg-view", Doc: "ArgView represents a slice of reflect.Value's and associated names, for the\npurpose of supplying arguments to methods called via the MethodView\nframework.", Embeds: []gti.Field{{Name: "Frame"}}, Fields: []gti.Field{{Name: "Title", Doc: "title / prompt to show above the editor fields"}, {Name: "Args", Doc: "the args that we are a view onto"}, {Name: "ViewPath", Doc: "a record of parent View names that have led up to this view -- displayed as extra contextual information in view dialog windows"}}, Instance: &ArgView{}})

// NewArgView adds a new [ArgView] with the given name to the given parent:
// ArgView represents a slice of reflect.Value's and associated names, for the
// purpose of supplying arguments to methods called via the MethodView
// framework.
func NewArgView(par ki.Ki, name ...string) *ArgView {
	return par.NewChild(ArgViewType, name...).(*ArgView)
}

// KiType returns the [*gti.Type] of [ArgView]
func (t *ArgView) KiType() *gti.Type { return ArgViewType }

// New returns a new [*ArgView] value
func (t *ArgView) New() ki.Ki { return &ArgView{} }

// SetTitle sets the [ArgView.Title]:
// title / prompt to show above the editor fields
func (t *ArgView) SetTitle(v string) *ArgView { t.Title = v; return t }

// SetArgs sets the [ArgView.Args]:
// the args that we are a view onto
func (t *ArgView) SetArgs(v ...Value) *ArgView { t.Args = v; return t }

// SetViewPath sets the [ArgView.ViewPath]:
// a record of parent View names that have led up to this view -- displayed as extra contextual information in view dialog windows
func (t *ArgView) SetViewPath(v string) *ArgView { t.ViewPath = v; return t }

// SetTooltip sets the [ArgView.Tooltip]
func (t *ArgView) SetTooltip(v string) *ArgView { t.Tooltip = v; return t }

// SetStackTop sets the [ArgView.StackTop]
func (t *ArgView) SetStackTop(v int) *ArgView { t.StackTop = v; return t }

// SetStripes sets the [ArgView.Stripes]
func (t *ArgView) SetStripes(v gi.Stripes) *ArgView { t.Stripes = v; return t }

// ColorViewType is the [gti.Type] for [ColorView]
var ColorViewType = gti.AddType(&gti.Type{Name: "cogentcore.org/core/giv.ColorView", IDName: "color-view", Doc: "ColorView shows a color, using sliders or numbers to set values.", Embeds: []gti.Field{{Name: "Frame"}}, Fields: []gti.Field{{Name: "Color", Doc: "the color that we view"}, {Name: "TmpSave", Doc: "value view that needs to have SaveTmp called on it whenever a change is made to one of the underlying values -- pass this down to any sub-views created from a parent"}, {Name: "ViewPath", Doc: "a record of parent View names that have led up to this view -- displayed as extra contextual information in view dialog windows"}}, Instance: &ColorView{}})

// NewColorView adds a new [ColorView] with the given name to the given parent:
// ColorView shows a color, using sliders or numbers to set values.
func NewColorView(par ki.Ki, name ...string) *ColorView {
	return par.NewChild(ColorViewType, name...).(*ColorView)
}

// KiType returns the [*gti.Type] of [ColorView]
func (t *ColorView) KiType() *gti.Type { return ColorViewType }

// New returns a new [*ColorView] value
func (t *ColorView) New() ki.Ki { return &ColorView{} }

// SetTmpSave sets the [ColorView.TmpSave]:
// value view that needs to have SaveTmp called on it whenever a change is made to one of the underlying values -- pass this down to any sub-views created from a parent
func (t *ColorView) SetTmpSave(v Value) *ColorView { t.TmpSave = v; return t }

// SetViewPath sets the [ColorView.ViewPath]:
// a record of parent View names that have led up to this view -- displayed as extra contextual information in view dialog windows
func (t *ColorView) SetViewPath(v string) *ColorView { t.ViewPath = v; return t }

// SetTooltip sets the [ColorView.Tooltip]
func (t *ColorView) SetTooltip(v string) *ColorView { t.Tooltip = v; return t }

// SetStackTop sets the [ColorView.StackTop]
func (t *ColorView) SetStackTop(v int) *ColorView { t.StackTop = v; return t }

// SetStripes sets the [ColorView.Stripes]
func (t *ColorView) SetStripes(v gi.Stripes) *ColorView { t.Stripes = v; return t }

// FileViewType is the [gti.Type] for [FileView]
var FileViewType = gti.AddType(&gti.Type{Name: "cogentcore.org/core/giv.FileView", IDName: "file-view", Doc: "FileView is a viewer onto files -- core of the file chooser dialog", Embeds: []gti.Field{{Name: "Frame"}}, Fields: []gti.Field{{Name: "DirPath", Doc: "path to directory of files to display"}, {Name: "SelFile", Doc: "selected file"}, {Name: "Ext", Doc: "target extension(s) (comma separated if multiple, including initial .), if any"}, {Name: "FilterFunc", Doc: "optional styling function"}, {Name: "ExtMap", Doc: "map of lower-cased extensions from Ext -- used for highlighting files with one of these extensions -- maps onto original ext value"}, {Name: "Files", Doc: "files for current directory"}, {Name: "SelectedIdx", Doc: "index of currently-selected file in Files list (-1 if none)"}, {Name: "Watcher", Doc: "change notify for current dir"}, {Name: "DoneWatcher", Doc: "channel to close watcher watcher"}, {Name: "UpdtMu", Doc: "UpdateFiles mutex"}, {Name: "PrevPath", Doc: "Previous path that was processed via UpdateFiles"}}, Instance: &FileView{}})

// NewFileView adds a new [FileView] with the given name to the given parent:
// FileView is a viewer onto files -- core of the file chooser dialog
func NewFileView(par ki.Ki, name ...string) *FileView {
	return par.NewChild(FileViewType, name...).(*FileView)
}

// KiType returns the [*gti.Type] of [FileView]
func (t *FileView) KiType() *gti.Type { return FileViewType }

// New returns a new [*FileView] value
func (t *FileView) New() ki.Ki { return &FileView{} }

// SetDirPath sets the [FileView.DirPath]:
// path to directory of files to display
func (t *FileView) SetDirPath(v string) *FileView { t.DirPath = v; return t }

// SetSelFile sets the [FileView.SelFile]:
// selected file
func (t *FileView) SetSelFile(v string) *FileView { t.SelFile = v; return t }

// SetFilterFunc sets the [FileView.FilterFunc]:
// optional styling function
func (t *FileView) SetFilterFunc(v FileViewFilterFunc) *FileView { t.FilterFunc = v; return t }

// SetExtMap sets the [FileView.ExtMap]:
// map of lower-cased extensions from Ext -- used for highlighting files with one of these extensions -- maps onto original ext value
func (t *FileView) SetExtMap(v map[string]string) *FileView { t.ExtMap = v; return t }

// SetFiles sets the [FileView.Files]:
// files for current directory
func (t *FileView) SetFiles(v ...*fi.FileInfo) *FileView { t.Files = v; return t }

// SetTooltip sets the [FileView.Tooltip]
func (t *FileView) SetTooltip(v string) *FileView { t.Tooltip = v; return t }

// SetStackTop sets the [FileView.StackTop]
func (t *FileView) SetStackTop(v int) *FileView { t.StackTop = v; return t }

// SetStripes sets the [FileView.Stripes]
func (t *FileView) SetStripes(v gi.Stripes) *FileView { t.Stripes = v; return t }

// FuncButtonType is the [gti.Type] for [FuncButton]
var FuncButtonType = gti.AddType(&gti.Type{Name: "cogentcore.org/core/giv.FuncButton", IDName: "func-button", Doc: "FuncButton is a button that is set up to call a function when it\nis pressed, using a dialog to prompt the user for any arguments.\nAlso, it automatically sets various properties of the button like\nthe name, text, tooltip, and icon based on the properties of the\nfunction, using reflect and gti. The function must be registered\nwith gti to get documentation information, but that is not required;\nadd a `//gti:add` comment directive and run `core generate`\nif you want tooltips. If the function is a method, both the method and\nits receiver type must be added to gti to get documentation.", Directives: []gti.Directive{{Tool: "core", Directive: "no-new"}}, Embeds: []gti.Field{{Name: "Button"}}, Fields: []gti.Field{{Name: "Func", Doc: "Func is the [gti.Func] associated with this button.\nThis function can also be a method, but it must be\nconverted to a [gti.Func] first. It should typically\nbe set using [FuncButton.SetFunc]."}, {Name: "ReflectFunc", Doc: "ReflectFunc is the [reflect.Value] of the function or\nmethod associated with this button. It should typically\nbet set using [FuncButton.SetFunc]."}, {Name: "Args", Doc: "Args are the [Value] objects associated with the\narguments of the function. They are automatically set in\n[SetFunc], but they can be customized to configure\ndefault values and other options."}, {Name: "Returns", Doc: "Returns are the [Value] objects associated with the\nreturn values of the function. They are automatically\nset in [SetFunc], but they can be customized to configure\ndefault values and other options. The [reflect.Value]s of\nthe [Value] objects are not set until the function is\ncalled, and are thus not typically applicable to access."}, {Name: "Confirm", Doc: "Confirm is whether to prompt the user for confirmation\nbefore calling the function."}, {Name: "ShowReturn", Doc: "ShowReturn is whether to display the return values of\nthe function (and a success message if there are none).\nThe way that the return values are shown is determined\nby ShowReturnAsDialog. ShowReturn is on by default, unless\nthe function has no return values."}, {Name: "ShowReturnAsDialog", Doc: "ShowReturnAsDialog, if and only if ShowReturn is true,\nindicates to show the return values of the function in\na dialog, instead of in a snackbar, as they are by default.\nIf there are multiple return values from the function, or if\none of them is a complex type (pointer, struct, slice,\narray, map), then ShowReturnAsDialog will\nautomatically be set to true."}, {Name: "NewWindow", Doc: "NewWindow makes the ReturnDialog a NewWindow dialog\n(if supported by platform)."}, {Name: "WarnUnadded", Doc: "WarnUnadded is whether to log warnings when a function that\nhas not been added to gti is used. It is on by default and\nmust be set before [FuncButton.SetFunc] is called for it to\nhave any effect."}, {Name: "Context", Doc: "Context is used for opening Dialogs if non-nil."}}, Instance: &FuncButton{}})

// KiType returns the [*gti.Type] of [FuncButton]
func (t *FuncButton) KiType() *gti.Type { return FuncButtonType }

// New returns a new [*FuncButton] value
func (t *FuncButton) New() ki.Ki { return &FuncButton{} }

// SetConfirm sets the [FuncButton.Confirm]:
// Confirm is whether to prompt the user for confirmation
// before calling the function.
func (t *FuncButton) SetConfirm(v bool) *FuncButton { t.Confirm = v; return t }

// SetShowReturn sets the [FuncButton.ShowReturn]:
// ShowReturn is whether to display the return values of
// the function (and a success message if there are none).
// The way that the return values are shown is determined
// by ShowReturnAsDialog. ShowReturn is on by default, unless
// the function has no return values.
func (t *FuncButton) SetShowReturn(v bool) *FuncButton { t.ShowReturn = v; return t }

// SetShowReturnAsDialog sets the [FuncButton.ShowReturnAsDialog]:
// ShowReturnAsDialog, if and only if ShowReturn is true,
// indicates to show the return values of the function in
// a dialog, instead of in a snackbar, as they are by default.
// If there are multiple return values from the function, or if
// one of them is a complex type (pointer, struct, slice,
// array, map), then ShowReturnAsDialog will
// automatically be set to true.
func (t *FuncButton) SetShowReturnAsDialog(v bool) *FuncButton { t.ShowReturnAsDialog = v; return t }

// SetNewWindow sets the [FuncButton.NewWindow]:
// NewWindow makes the ReturnDialog a NewWindow dialog
// (if supported by platform).
func (t *FuncButton) SetNewWindow(v bool) *FuncButton { t.NewWindow = v; return t }

// SetWarnUnadded sets the [FuncButton.WarnUnadded]:
// WarnUnadded is whether to log warnings when a function that
// has not been added to gti is used. It is on by default and
// must be set before [FuncButton.SetFunc] is called for it to
// have any effect.
func (t *FuncButton) SetWarnUnadded(v bool) *FuncButton { t.WarnUnadded = v; return t }

// SetContext sets the [FuncButton.Context]:
// Context is used for opening Dialogs if non-nil.
func (t *FuncButton) SetContext(v gi.Widget) *FuncButton { t.Context = v; return t }

// SetTooltip sets the [FuncButton.Tooltip]
func (t *FuncButton) SetTooltip(v string) *FuncButton { t.Tooltip = v; return t }

// SetType sets the [FuncButton.Type]
func (t *FuncButton) SetType(v gi.ButtonTypes) *FuncButton { t.Type = v; return t }

// SetIcon sets the [FuncButton.Icon]
func (t *FuncButton) SetIcon(v icons.Icon) *FuncButton { t.Icon = v; return t }

// SetIndicator sets the [FuncButton.Indicator]
func (t *FuncButton) SetIndicator(v icons.Icon) *FuncButton { t.Indicator = v; return t }

// SetShortcut sets the [FuncButton.Shortcut]
func (t *FuncButton) SetShortcut(v key.Chord) *FuncButton { t.Shortcut = v; return t }

// SetMenu sets the [FuncButton.Menu]
func (t *FuncButton) SetMenu(v func(m *gi.Scene)) *FuncButton { t.Menu = v; return t }

// InspectorType is the [gti.Type] for [Inspector]
var InspectorType = gti.AddType(&gti.Type{Name: "cogentcore.org/core/giv.Inspector", IDName: "inspector", Doc: "Inspector represents a struct, creating a property editor of the fields --\nconstructs Children widgets to show the field names and editor fields for\neach field, within an overall frame with an optional title, and a button\nbox at the bottom where methods can be invoked", Methods: []gti.Method{{Name: "UpdateItems", Doc: "UpdateItems updates the objects being edited (e.g., updating display changes)", Directives: []gti.Directive{{Tool: "gti", Directive: "add"}}}, {Name: "Save", Doc: "Save saves tree to current filename, in a standard JSON-formatted file", Directives: []gti.Directive{{Tool: "gti", Directive: "add"}}}, {Name: "SaveAs", Doc: "SaveAs saves tree to given filename, in a standard JSON-formatted file", Directives: []gti.Directive{{Tool: "gti", Directive: "add"}}, Args: []string{"filename"}}, {Name: "Open", Doc: "Open opens tree from given filename, in a standard JSON-formatted file", Directives: []gti.Directive{{Tool: "gti", Directive: "add"}}, Args: []string{"filename"}}, {Name: "ToggleSelectionMode", Doc: "ToggleSelectionMode toggles the editor between selection mode or not.\nIn selection mode, bounding boxes are rendered around each Widget,\nand clicking on a Widget pulls it up in the inspector.", Directives: []gti.Directive{{Tool: "gti", Directive: "add"}}}, {Name: "InspectApp", Doc: "InspectApp displays the underlying operating system app", Directives: []gti.Directive{{Tool: "gti", Directive: "add"}}}}, Embeds: []gti.Field{{Name: "Frame"}}, Fields: []gti.Field{{Name: "KiRoot", Doc: "root of tree being edited"}, {Name: "Changed", Doc: "has the root changed via gui actions?  updated from treeview and structview for changes"}, {Name: "Filename", Doc: "current filename for saving / loading"}}, Instance: &Inspector{}})

// NewInspector adds a new [Inspector] with the given name to the given parent:
// Inspector represents a struct, creating a property editor of the fields --
// constructs Children widgets to show the field names and editor fields for
// each field, within an overall frame with an optional title, and a button
// box at the bottom where methods can be invoked
func NewInspector(par ki.Ki, name ...string) *Inspector {
	return par.NewChild(InspectorType, name...).(*Inspector)
}

// KiType returns the [*gti.Type] of [Inspector]
func (t *Inspector) KiType() *gti.Type { return InspectorType }

// New returns a new [*Inspector] value
func (t *Inspector) New() ki.Ki { return &Inspector{} }

// SetKiRoot sets the [Inspector.KiRoot]:
// root of tree being edited
func (t *Inspector) SetKiRoot(v ki.Ki) *Inspector { t.KiRoot = v; return t }

// SetFilename sets the [Inspector.Filename]:
// current filename for saving / loading
func (t *Inspector) SetFilename(v gi.Filename) *Inspector { t.Filename = v; return t }

// SetTooltip sets the [Inspector.Tooltip]
func (t *Inspector) SetTooltip(v string) *Inspector { t.Tooltip = v; return t }

// SetStackTop sets the [Inspector.StackTop]
func (t *Inspector) SetStackTop(v int) *Inspector { t.StackTop = v; return t }

// SetStripes sets the [Inspector.Stripes]
func (t *Inspector) SetStripes(v gi.Stripes) *Inspector { t.Stripes = v; return t }

// KeyChordEditType is the [gti.Type] for [KeyChordEdit]
var KeyChordEditType = gti.AddType(&gti.Type{Name: "cogentcore.org/core/giv.KeyChordEdit", IDName: "key-chord-edit", Doc: "KeyChordEdit is a label widget that shows a key chord string, and, when in\nfocus (after being clicked) will update to whatever key chord is typed --\nused for representing and editing key chords.", Embeds: []gti.Field{{Name: "Label"}}, Fields: []gti.Field{{Name: "FocusActive", Doc: "true if the keyboard focus is active or not -- when we lose active focus we apply changes"}}, Instance: &KeyChordEdit{}})

// NewKeyChordEdit adds a new [KeyChordEdit] with the given name to the given parent:
// KeyChordEdit is a label widget that shows a key chord string, and, when in
// focus (after being clicked) will update to whatever key chord is typed --
// used for representing and editing key chords.
func NewKeyChordEdit(par ki.Ki, name ...string) *KeyChordEdit {
	return par.NewChild(KeyChordEditType, name...).(*KeyChordEdit)
}

// KiType returns the [*gti.Type] of [KeyChordEdit]
func (t *KeyChordEdit) KiType() *gti.Type { return KeyChordEditType }

// New returns a new [*KeyChordEdit] value
func (t *KeyChordEdit) New() ki.Ki { return &KeyChordEdit{} }

// SetFocusActive sets the [KeyChordEdit.FocusActive]:
// true if the keyboard focus is active or not -- when we lose active focus we apply changes
func (t *KeyChordEdit) SetFocusActive(v bool) *KeyChordEdit { t.FocusActive = v; return t }

// SetTooltip sets the [KeyChordEdit.Tooltip]
func (t *KeyChordEdit) SetTooltip(v string) *KeyChordEdit { t.Tooltip = v; return t }

// SetText sets the [KeyChordEdit.Text]
func (t *KeyChordEdit) SetText(v string) *KeyChordEdit { t.Text = v; return t }

// SetType sets the [KeyChordEdit.Type]
func (t *KeyChordEdit) SetType(v gi.LabelTypes) *KeyChordEdit { t.Type = v; return t }

// MapViewType is the [gti.Type] for [MapView]
var MapViewType = gti.AddType(&gti.Type{Name: "cogentcore.org/core/giv.MapView", IDName: "map-view", Doc: "MapView represents a map, creating a property editor of the values --\nconstructs Children widgets to show the key / value pairs, within an\noverall frame.", Embeds: []gti.Field{{Name: "Frame"}}, Fields: []gti.Field{{Name: "Map", Doc: "the map that we are a view onto"}, {Name: "MapValView", Doc: "Value for the map itself, if this was created within value view framework -- otherwise nil"}, {Name: "Changed", Doc: "has the map been edited?"}, {Name: "Keys", Doc: "Value representations of the map keys"}, {Name: "Values", Doc: "Value representations of the map values"}, {Name: "SortVals", Doc: "sort by values instead of keys"}, {Name: "NCols", Doc: "the number of columns in the map; do not set externally; generally only access internally"}, {Name: "TmpSave", Doc: "value view that needs to have SaveTmp called on it whenever a change is made to one of the underlying values -- pass this down to any sub-views created from a parent"}, {Name: "ViewPath", Doc: "a record of parent View names that have led up to this view -- displayed as extra contextual information in view dialog windows"}}, Instance: &MapView{}})

// NewMapView adds a new [MapView] with the given name to the given parent:
// MapView represents a map, creating a property editor of the values --
// constructs Children widgets to show the key / value pairs, within an
// overall frame.
func NewMapView(par ki.Ki, name ...string) *MapView {
	return par.NewChild(MapViewType, name...).(*MapView)
}

// KiType returns the [*gti.Type] of [MapView]
func (t *MapView) KiType() *gti.Type { return MapViewType }

// New returns a new [*MapView] value
func (t *MapView) New() ki.Ki { return &MapView{} }

// SetMapValView sets the [MapView.MapValView]:
// Value for the map itself, if this was created within value view framework -- otherwise nil
func (t *MapView) SetMapValView(v Value) *MapView { t.MapValView = v; return t }

// SetKeys sets the [MapView.Keys]:
// Value representations of the map keys
func (t *MapView) SetKeys(v ...Value) *MapView { t.Keys = v; return t }

// SetValues sets the [MapView.Values]:
// Value representations of the map values
func (t *MapView) SetValues(v ...Value) *MapView { t.Values = v; return t }

// SetSortVals sets the [MapView.SortVals]:
// sort by values instead of keys
func (t *MapView) SetSortVals(v bool) *MapView { t.SortVals = v; return t }

// SetNcols sets the [MapView.NCols]:
// the number of columns in the map; do not set externally; generally only access internally
func (t *MapView) SetNcols(v int) *MapView { t.NCols = v; return t }

// SetTmpSave sets the [MapView.TmpSave]:
// value view that needs to have SaveTmp called on it whenever a change is made to one of the underlying values -- pass this down to any sub-views created from a parent
func (t *MapView) SetTmpSave(v Value) *MapView { t.TmpSave = v; return t }

// SetViewPath sets the [MapView.ViewPath]:
// a record of parent View names that have led up to this view -- displayed as extra contextual information in view dialog windows
func (t *MapView) SetViewPath(v string) *MapView { t.ViewPath = v; return t }

// SetTooltip sets the [MapView.Tooltip]
func (t *MapView) SetTooltip(v string) *MapView { t.Tooltip = v; return t }

// SetStackTop sets the [MapView.StackTop]
func (t *MapView) SetStackTop(v int) *MapView { t.StackTop = v; return t }

// SetStripes sets the [MapView.Stripes]
func (t *MapView) SetStripes(v gi.Stripes) *MapView { t.Stripes = v; return t }

// MapViewInlineType is the [gti.Type] for [MapViewInline]
var MapViewInlineType = gti.AddType(&gti.Type{Name: "cogentcore.org/core/giv.MapViewInline", IDName: "map-view-inline", Doc: "MapViewInline represents a map as a single line widget,\nfor smaller maps and those explicitly marked inline.", Embeds: []gti.Field{{Name: "Layout"}}, Fields: []gti.Field{{Name: "Map", Doc: "the map that we are a view onto"}, {Name: "MapValView", Doc: "Value for the map itself, if this was created within value view framework -- otherwise nil"}, {Name: "Changed", Doc: "has the map been edited?"}, {Name: "Keys", Doc: "Value representations of the map keys"}, {Name: "Values", Doc: "Value representations of the fields"}, {Name: "TmpSave", Doc: "value view that needs to have SaveTmp called on it whenever a change is made to one of the underlying values -- pass this down to any sub-views created from a parent"}, {Name: "ViewPath", Doc: "a record of parent View names that have led up to this view -- displayed as extra contextual information in view dialog windows"}}, Instance: &MapViewInline{}})

// NewMapViewInline adds a new [MapViewInline] with the given name to the given parent:
// MapViewInline represents a map as a single line widget,
// for smaller maps and those explicitly marked inline.
func NewMapViewInline(par ki.Ki, name ...string) *MapViewInline {
	return par.NewChild(MapViewInlineType, name...).(*MapViewInline)
}

// KiType returns the [*gti.Type] of [MapViewInline]
func (t *MapViewInline) KiType() *gti.Type { return MapViewInlineType }

// New returns a new [*MapViewInline] value
func (t *MapViewInline) New() ki.Ki { return &MapViewInline{} }

// SetMapValView sets the [MapViewInline.MapValView]:
// Value for the map itself, if this was created within value view framework -- otherwise nil
func (t *MapViewInline) SetMapValView(v Value) *MapViewInline { t.MapValView = v; return t }

// SetKeys sets the [MapViewInline.Keys]:
// Value representations of the map keys
func (t *MapViewInline) SetKeys(v ...Value) *MapViewInline { t.Keys = v; return t }

// SetValues sets the [MapViewInline.Values]:
// Value representations of the fields
func (t *MapViewInline) SetValues(v ...Value) *MapViewInline { t.Values = v; return t }

// SetTmpSave sets the [MapViewInline.TmpSave]:
// value view that needs to have SaveTmp called on it whenever a change is made to one of the underlying values -- pass this down to any sub-views created from a parent
func (t *MapViewInline) SetTmpSave(v Value) *MapViewInline { t.TmpSave = v; return t }

// SetViewPath sets the [MapViewInline.ViewPath]:
// a record of parent View names that have led up to this view -- displayed as extra contextual information in view dialog windows
func (t *MapViewInline) SetViewPath(v string) *MapViewInline { t.ViewPath = v; return t }

// SetTooltip sets the [MapViewInline.Tooltip]
func (t *MapViewInline) SetTooltip(v string) *MapViewInline { t.Tooltip = v; return t }

// SetStackTop sets the [MapViewInline.StackTop]
func (t *MapViewInline) SetStackTop(v int) *MapViewInline { t.StackTop = v; return t }

// SliceViewType is the [gti.Type] for [SliceView]
var SliceViewType = gti.AddType(&gti.Type{Name: "cogentcore.org/core/giv.SliceView", IDName: "slice-view", Doc: "SliceView represents a slice, creating an interactive viewer / editor of the\nelements as rows in a table.  Widgets to show the index / value pairs, within an\noverall frame.\nSet to ReadOnly for select-only mode, which emits WidgetSig WidgetSelected\nsignals when selection is updated.", Embeds: []gti.Field{{Name: "SliceViewBase"}}, Fields: []gti.Field{{Name: "StyleFunc", Doc: "optional styling function"}}, Instance: &SliceView{}})

// NewSliceView adds a new [SliceView] with the given name to the given parent:
// SliceView represents a slice, creating an interactive viewer / editor of the
// elements as rows in a table.  Widgets to show the index / value pairs, within an
// overall frame.
// Set to ReadOnly for select-only mode, which emits WidgetSig WidgetSelected
// signals when selection is updated.
func NewSliceView(par ki.Ki, name ...string) *SliceView {
	return par.NewChild(SliceViewType, name...).(*SliceView)
}

// KiType returns the [*gti.Type] of [SliceView]
func (t *SliceView) KiType() *gti.Type { return SliceViewType }

// New returns a new [*SliceView] value
func (t *SliceView) New() ki.Ki { return &SliceView{} }

// SetStyleFunc sets the [SliceView.StyleFunc]:
// optional styling function
func (t *SliceView) SetStyleFunc(v SliceViewStyleFunc) *SliceView { t.StyleFunc = v; return t }

// SetTooltip sets the [SliceView.Tooltip]
func (t *SliceView) SetTooltip(v string) *SliceView { t.Tooltip = v; return t }

// SetStackTop sets the [SliceView.StackTop]
func (t *SliceView) SetStackTop(v int) *SliceView { t.StackTop = v; return t }

// SetStripes sets the [SliceView.Stripes]
func (t *SliceView) SetStripes(v gi.Stripes) *SliceView { t.Stripes = v; return t }

// SetMinRows sets the [SliceView.MinRows]
func (t *SliceView) SetMinRows(v int) *SliceView { t.MinRows = v; return t }

// SetViewMu sets the [SliceView.ViewMu]
func (t *SliceView) SetViewMu(v *sync.Mutex) *SliceView { t.ViewMu = v; return t }

// SetSliceNpval sets the [SliceView.SliceNPVal]
func (t *SliceView) SetSliceNpval(v reflect.Value) *SliceView { t.SliceNPVal = v; return t }

// SetSliceValView sets the [SliceView.SliceValView]
func (t *SliceView) SetSliceValView(v Value) *SliceView { t.SliceValView = v; return t }

// SetValues sets the [SliceView.Values]
func (t *SliceView) SetValues(v ...Value) *SliceView { t.Values = v; return t }

// SetSelVal sets the [SliceView.SelVal]
func (t *SliceView) SetSelVal(v any) *SliceView { t.SelVal = v; return t }

// SetSelIdx sets the [SliceView.SelIdx]
func (t *SliceView) SetSelIdx(v int) *SliceView { t.SelIdx = v; return t }

// SetSelIdxs sets the [SliceView.SelIdxs]
func (t *SliceView) SetSelIdxs(v map[int]struct{}) *SliceView { t.SelIdxs = v; return t }

// SetInitSelIdx sets the [SliceView.InitSelIdx]
func (t *SliceView) SetInitSelIdx(v int) *SliceView { t.InitSelIdx = v; return t }

// SetDraggedIdxs sets the [SliceView.DraggedIdxs]
func (t *SliceView) SetDraggedIdxs(v ...int) *SliceView { t.DraggedIdxs = v; return t }

// SetViewPath sets the [SliceView.ViewPath]
func (t *SliceView) SetViewPath(v string) *SliceView { t.ViewPath = v; return t }

// SetTmpSave sets the [SliceView.TmpSave]
func (t *SliceView) SetTmpSave(v Value) *SliceView { t.TmpSave = v; return t }

// SetVisRows sets the [SliceView.VisRows]
func (t *SliceView) SetVisRows(v int) *SliceView { t.VisRows = v; return t }

// SetStartIdx sets the [SliceView.StartIdx]
func (t *SliceView) SetStartIdx(v int) *SliceView { t.StartIdx = v; return t }

// SetSliceSize sets the [SliceView.SliceSize]
func (t *SliceView) SetSliceSize(v int) *SliceView { t.SliceSize = v; return t }

// SetConfigIter sets the [SliceView.ConfigIter]
func (t *SliceView) SetConfigIter(v int) *SliceView { t.ConfigIter = v; return t }

// SetTmpIdx sets the [SliceView.TmpIdx]
func (t *SliceView) SetTmpIdx(v int) *SliceView { t.TmpIdx = v; return t }

// SetElVal sets the [SliceView.ElVal]
func (t *SliceView) SetElVal(v reflect.Value) *SliceView { t.ElVal = v; return t }

// SliceViewBaseType is the [gti.Type] for [SliceViewBase]
var SliceViewBaseType = gti.AddType(&gti.Type{Name: "cogentcore.org/core/giv.SliceViewBase", IDName: "slice-view-base", Doc: "SliceViewBase is the base for SliceView and TableView and any other viewers\nof array-like data.  It automatically computes the number of rows that fit\nwithin its allocated space, and manages the offset view window into the full\nlist of items, and supports row selection, copy / paste, Drag-n-Drop, etc.\nSet to ReadOnly for select-only mode, which emits WidgetSig WidgetSelected\nsignals when selection is updated.", Methods: []gti.Method{{Name: "CopyIdxs", Doc: "CopyIdxs copies selected idxs to goosi.Clipboard, optionally resetting the selection", Directives: []gti.Directive{{Tool: "gti", Directive: "add"}}, Args: []string{"reset"}}, {Name: "DeleteIdxs", Doc: "DeleteIdxs deletes all selected indexes", Directives: []gti.Directive{{Tool: "gti", Directive: "add"}}}, {Name: "CutIdxs", Doc: "CutIdxs copies selected indexes to goosi.Clipboard and deletes selected indexes", Directives: []gti.Directive{{Tool: "gti", Directive: "add"}}}, {Name: "PasteIdx", Doc: "PasteIdx pastes clipboard at given idx", Directives: []gti.Directive{{Tool: "gti", Directive: "add"}}, Args: []string{"idx"}}, {Name: "Duplicate", Doc: "Duplicate copies selected items and inserts them after current selection --\nreturn idx of start of duplicates if successful, else -1", Directives: []gti.Directive{{Tool: "gti", Directive: "add"}}, Returns: []string{"int"}}}, Embeds: []gti.Field{{Name: "Frame"}}, Fields: []gti.Field{{Name: "Slice", Doc: "the slice that we are a view onto -- must be a pointer to that slice"}, {Name: "MinRows", Doc: "MinRows specifies the minimum number of rows to display, to ensure\nat least this amount is displayed."}, {Name: "ViewMu", Doc: "optional mutex that, if non-nil, will be used around any updates that\nread / modify the underlying Slice data.\nCan be used to protect against random updating if your code has specific\nupdate points that can be likewise protected with this same mutex."}, {Name: "Changed", Doc: "Changed indicates whether the underlying slice\nhas been edited in any way"}, {Name: "SliceNPVal", Doc: "non-ptr reflect.Value of the slice"}, {Name: "SliceValView", Doc: "Value for the slice itself, if this was created within value view framework -- otherwise nil"}, {Name: "Values", Doc: "Value representations of the slice values"}, {Name: "SelVal", Doc: "current selection value -- initially select this value if set"}, {Name: "SelIdx", Doc: "index of currently-selected item, in ReadOnly mode only"}, {Name: "SelIdxs", Doc: "list of currently-selected slice indexes"}, {Name: "InitSelIdx", Doc: "index of row to select at start"}, {Name: "DraggedIdxs", Doc: "list of currently-dragged indexes"}, {Name: "ViewPath", Doc: "a record of parent View names that have led up to this view -- displayed as extra contextual information in view dialog windows"}, {Name: "TmpSave", Doc: "value view that needs to have SaveTmp called on it whenever a change is made to one of the underlying values -- pass this down to any sub-views created from a parent"}, {Name: "VisRows", Doc: "total number of rows visible in allocated display size"}, {Name: "StartIdx", Doc: "starting slice index of visible rows"}, {Name: "SliceSize", Doc: "size of slice"}, {Name: "ConfigIter", Doc: "iteration through the configuration process, reset when a new slice type is set"}, {Name: "TmpIdx", Doc: "temp idx state for e.g., dnd"}, {Name: "ElVal", Doc: "ElVal is a Value representation of the underlying element type\nwhich is used whenever there are no slice elements available"}}, Instance: &SliceViewBase{}})

// NewSliceViewBase adds a new [SliceViewBase] with the given name to the given parent:
// SliceViewBase is the base for SliceView and TableView and any other viewers
// of array-like data.  It automatically computes the number of rows that fit
// within its allocated space, and manages the offset view window into the full
// list of items, and supports row selection, copy / paste, Drag-n-Drop, etc.
// Set to ReadOnly for select-only mode, which emits WidgetSig WidgetSelected
// signals when selection is updated.
func NewSliceViewBase(par ki.Ki, name ...string) *SliceViewBase {
	return par.NewChild(SliceViewBaseType, name...).(*SliceViewBase)
}

// KiType returns the [*gti.Type] of [SliceViewBase]
func (t *SliceViewBase) KiType() *gti.Type { return SliceViewBaseType }

// New returns a new [*SliceViewBase] value
func (t *SliceViewBase) New() ki.Ki { return &SliceViewBase{} }

// SetMinRows sets the [SliceViewBase.MinRows]:
// MinRows specifies the minimum number of rows to display, to ensure
// at least this amount is displayed.
func (t *SliceViewBase) SetMinRows(v int) *SliceViewBase { t.MinRows = v; return t }

// SetViewMu sets the [SliceViewBase.ViewMu]:
// optional mutex that, if non-nil, will be used around any updates that
// read / modify the underlying Slice data.
// Can be used to protect against random updating if your code has specific
// update points that can be likewise protected with this same mutex.
func (t *SliceViewBase) SetViewMu(v *sync.Mutex) *SliceViewBase { t.ViewMu = v; return t }

// SetSliceNpval sets the [SliceViewBase.SliceNPVal]:
// non-ptr reflect.Value of the slice
func (t *SliceViewBase) SetSliceNpval(v reflect.Value) *SliceViewBase { t.SliceNPVal = v; return t }

// SetSliceValView sets the [SliceViewBase.SliceValView]:
// Value for the slice itself, if this was created within value view framework -- otherwise nil
func (t *SliceViewBase) SetSliceValView(v Value) *SliceViewBase { t.SliceValView = v; return t }

// SetValues sets the [SliceViewBase.Values]:
// Value representations of the slice values
func (t *SliceViewBase) SetValues(v ...Value) *SliceViewBase { t.Values = v; return t }

// SetSelVal sets the [SliceViewBase.SelVal]:
// current selection value -- initially select this value if set
func (t *SliceViewBase) SetSelVal(v any) *SliceViewBase { t.SelVal = v; return t }

// SetSelIdx sets the [SliceViewBase.SelIdx]:
// index of currently-selected item, in ReadOnly mode only
func (t *SliceViewBase) SetSelIdx(v int) *SliceViewBase { t.SelIdx = v; return t }

// SetSelIdxs sets the [SliceViewBase.SelIdxs]:
// list of currently-selected slice indexes
func (t *SliceViewBase) SetSelIdxs(v map[int]struct{}) *SliceViewBase { t.SelIdxs = v; return t }

// SetInitSelIdx sets the [SliceViewBase.InitSelIdx]:
// index of row to select at start
func (t *SliceViewBase) SetInitSelIdx(v int) *SliceViewBase { t.InitSelIdx = v; return t }

// SetDraggedIdxs sets the [SliceViewBase.DraggedIdxs]:
// list of currently-dragged indexes
func (t *SliceViewBase) SetDraggedIdxs(v ...int) *SliceViewBase { t.DraggedIdxs = v; return t }

// SetViewPath sets the [SliceViewBase.ViewPath]:
// a record of parent View names that have led up to this view -- displayed as extra contextual information in view dialog windows
func (t *SliceViewBase) SetViewPath(v string) *SliceViewBase { t.ViewPath = v; return t }

// SetTmpSave sets the [SliceViewBase.TmpSave]:
// value view that needs to have SaveTmp called on it whenever a change is made to one of the underlying values -- pass this down to any sub-views created from a parent
func (t *SliceViewBase) SetTmpSave(v Value) *SliceViewBase { t.TmpSave = v; return t }

// SetVisRows sets the [SliceViewBase.VisRows]:
// total number of rows visible in allocated display size
func (t *SliceViewBase) SetVisRows(v int) *SliceViewBase { t.VisRows = v; return t }

// SetStartIdx sets the [SliceViewBase.StartIdx]:
// starting slice index of visible rows
func (t *SliceViewBase) SetStartIdx(v int) *SliceViewBase { t.StartIdx = v; return t }

// SetSliceSize sets the [SliceViewBase.SliceSize]:
// size of slice
func (t *SliceViewBase) SetSliceSize(v int) *SliceViewBase { t.SliceSize = v; return t }

// SetConfigIter sets the [SliceViewBase.ConfigIter]:
// iteration through the configuration process, reset when a new slice type is set
func (t *SliceViewBase) SetConfigIter(v int) *SliceViewBase { t.ConfigIter = v; return t }

// SetTmpIdx sets the [SliceViewBase.TmpIdx]:
// temp idx state for e.g., dnd
func (t *SliceViewBase) SetTmpIdx(v int) *SliceViewBase { t.TmpIdx = v; return t }

// SetElVal sets the [SliceViewBase.ElVal]:
// ElVal is a Value representation of the underlying element type
// which is used whenever there are no slice elements available
func (t *SliceViewBase) SetElVal(v reflect.Value) *SliceViewBase { t.ElVal = v; return t }

// SetTooltip sets the [SliceViewBase.Tooltip]
func (t *SliceViewBase) SetTooltip(v string) *SliceViewBase { t.Tooltip = v; return t }

// SetStackTop sets the [SliceViewBase.StackTop]
func (t *SliceViewBase) SetStackTop(v int) *SliceViewBase { t.StackTop = v; return t }

// SetStripes sets the [SliceViewBase.Stripes]
func (t *SliceViewBase) SetStripes(v gi.Stripes) *SliceViewBase { t.Stripes = v; return t }

// SliceViewGridType is the [gti.Type] for [SliceViewGrid]
var SliceViewGridType = gti.AddType(&gti.Type{Name: "cogentcore.org/core/giv.SliceViewGrid", IDName: "slice-view-grid", Doc: "SliceViewGrid handles the resizing logic for SliceView, TableView.", Embeds: []gti.Field{{Name: "Frame"}}, Fields: []gti.Field{{Name: "MinRows", Doc: "MinRows is set from parent SV"}, {Name: "RowHeight", Doc: "height of a single row, computed during layout"}, {Name: "VisRows", Doc: "total number of rows visible in allocated display size"}}, Instance: &SliceViewGrid{}})

// NewSliceViewGrid adds a new [SliceViewGrid] with the given name to the given parent:
// SliceViewGrid handles the resizing logic for SliceView, TableView.
func NewSliceViewGrid(par ki.Ki, name ...string) *SliceViewGrid {
	return par.NewChild(SliceViewGridType, name...).(*SliceViewGrid)
}

// KiType returns the [*gti.Type] of [SliceViewGrid]
func (t *SliceViewGrid) KiType() *gti.Type { return SliceViewGridType }

// New returns a new [*SliceViewGrid] value
func (t *SliceViewGrid) New() ki.Ki { return &SliceViewGrid{} }

// SetMinRows sets the [SliceViewGrid.MinRows]:
// MinRows is set from parent SV
func (t *SliceViewGrid) SetMinRows(v int) *SliceViewGrid { t.MinRows = v; return t }

// SetRowHeight sets the [SliceViewGrid.RowHeight]:
// height of a single row, computed during layout
func (t *SliceViewGrid) SetRowHeight(v float32) *SliceViewGrid { t.RowHeight = v; return t }

// SetVisRows sets the [SliceViewGrid.VisRows]:
// total number of rows visible in allocated display size
func (t *SliceViewGrid) SetVisRows(v int) *SliceViewGrid { t.VisRows = v; return t }

// SetTooltip sets the [SliceViewGrid.Tooltip]
func (t *SliceViewGrid) SetTooltip(v string) *SliceViewGrid { t.Tooltip = v; return t }

// SetStackTop sets the [SliceViewGrid.StackTop]
func (t *SliceViewGrid) SetStackTop(v int) *SliceViewGrid { t.StackTop = v; return t }

// SetStripes sets the [SliceViewGrid.Stripes]
func (t *SliceViewGrid) SetStripes(v gi.Stripes) *SliceViewGrid { t.Stripes = v; return t }

// SliceViewInlineType is the [gti.Type] for [SliceViewInline]
var SliceViewInlineType = gti.AddType(&gti.Type{Name: "cogentcore.org/core/giv.SliceViewInline", IDName: "slice-view-inline", Doc: "SliceViewInline represents a slice as a single line widget,\nfor smaller slices and those explicitly marked inline.", Embeds: []gti.Field{{Name: "Layout"}}, Fields: []gti.Field{{Name: "Slice", Doc: "the slice that we are a view onto"}, {Name: "SliceValView", Doc: "Value for the slice itself, if this was created within value view framework -- otherwise nil"}, {Name: "IsArray", Doc: "whether the slice is actually an array -- no modifications"}, {Name: "IsFixedLen", Doc: "whether the slice has a fixed-len flag on it"}, {Name: "Changed", Doc: "has the slice been edited?"}, {Name: "Values", Doc: "Value representations of the fields"}, {Name: "TmpSave", Doc: "value view that needs to have SaveTmp called on it whenever a change is made to one of the underlying values -- pass this down to any sub-views created from a parent"}, {Name: "ViewPath", Doc: "a record of parent View names that have led up to this view -- displayed as extra contextual information in view dialog windows"}}, Instance: &SliceViewInline{}})

// NewSliceViewInline adds a new [SliceViewInline] with the given name to the given parent:
// SliceViewInline represents a slice as a single line widget,
// for smaller slices and those explicitly marked inline.
func NewSliceViewInline(par ki.Ki, name ...string) *SliceViewInline {
	return par.NewChild(SliceViewInlineType, name...).(*SliceViewInline)
}

// KiType returns the [*gti.Type] of [SliceViewInline]
func (t *SliceViewInline) KiType() *gti.Type { return SliceViewInlineType }

// New returns a new [*SliceViewInline] value
func (t *SliceViewInline) New() ki.Ki { return &SliceViewInline{} }

// SetSliceValView sets the [SliceViewInline.SliceValView]:
// Value for the slice itself, if this was created within value view framework -- otherwise nil
func (t *SliceViewInline) SetSliceValView(v Value) *SliceViewInline { t.SliceValView = v; return t }

// SetIsArray sets the [SliceViewInline.IsArray]:
// whether the slice is actually an array -- no modifications
func (t *SliceViewInline) SetIsArray(v bool) *SliceViewInline { t.IsArray = v; return t }

// SetIsFixedLen sets the [SliceViewInline.IsFixedLen]:
// whether the slice has a fixed-len flag on it
func (t *SliceViewInline) SetIsFixedLen(v bool) *SliceViewInline { t.IsFixedLen = v; return t }

// SetValues sets the [SliceViewInline.Values]:
// Value representations of the fields
func (t *SliceViewInline) SetValues(v ...Value) *SliceViewInline { t.Values = v; return t }

// SetTmpSave sets the [SliceViewInline.TmpSave]:
// value view that needs to have SaveTmp called on it whenever a change is made to one of the underlying values -- pass this down to any sub-views created from a parent
func (t *SliceViewInline) SetTmpSave(v Value) *SliceViewInline { t.TmpSave = v; return t }

// SetViewPath sets the [SliceViewInline.ViewPath]:
// a record of parent View names that have led up to this view -- displayed as extra contextual information in view dialog windows
func (t *SliceViewInline) SetViewPath(v string) *SliceViewInline { t.ViewPath = v; return t }

// SetTooltip sets the [SliceViewInline.Tooltip]
func (t *SliceViewInline) SetTooltip(v string) *SliceViewInline { t.Tooltip = v; return t }

// SetStackTop sets the [SliceViewInline.StackTop]
func (t *SliceViewInline) SetStackTop(v int) *SliceViewInline { t.StackTop = v; return t }

// StructViewType is the [gti.Type] for [StructView]
var StructViewType = gti.AddType(&gti.Type{Name: "cogentcore.org/core/giv.StructView", IDName: "struct-view", Doc: "StructView represents a struct, creating a property editor of the fields --\nconstructs Children widgets to show the field names and editor fields for\neach field, within an overall frame.", Embeds: []gti.Field{{Name: "Frame"}}, Fields: []gti.Field{{Name: "Struct", Doc: "the struct that we are a view onto"}, {Name: "StructValView", Doc: "Value for the struct itself, if this was created within value view framework -- otherwise nil"}, {Name: "Changed", Doc: "has the value of any field changed?  updated by the ViewSig signals from fields"}, {Name: "FieldViews", Doc: "Value representations of the fields"}, {Name: "TmpSave", Doc: "value view that needs to have SaveTmp called on it whenever a change is made to one of the underlying values -- pass this down to any sub-views created from a parent"}, {Name: "ViewPath", Doc: "a record of parent View names that have led up to this view -- displayed as extra contextual information in view dialog windows"}, {Name: "HasViewIfs", Doc: "if true, some fields have viewif conditional view tags -- update after.."}, {Name: "TypeFieldTags", Doc: "extra tags by field name -- from type properties"}}, Instance: &StructView{}})

// NewStructView adds a new [StructView] with the given name to the given parent:
// StructView represents a struct, creating a property editor of the fields --
// constructs Children widgets to show the field names and editor fields for
// each field, within an overall frame.
func NewStructView(par ki.Ki, name ...string) *StructView {
	return par.NewChild(StructViewType, name...).(*StructView)
}

// KiType returns the [*gti.Type] of [StructView]
func (t *StructView) KiType() *gti.Type { return StructViewType }

// New returns a new [*StructView] value
func (t *StructView) New() ki.Ki { return &StructView{} }

// SetTmpSave sets the [StructView.TmpSave]:
// value view that needs to have SaveTmp called on it whenever a change is made to one of the underlying values -- pass this down to any sub-views created from a parent
func (t *StructView) SetTmpSave(v Value) *StructView { t.TmpSave = v; return t }

// SetViewPath sets the [StructView.ViewPath]:
// a record of parent View names that have led up to this view -- displayed as extra contextual information in view dialog windows
func (t *StructView) SetViewPath(v string) *StructView { t.ViewPath = v; return t }

// SetTooltip sets the [StructView.Tooltip]
func (t *StructView) SetTooltip(v string) *StructView { t.Tooltip = v; return t }

// SetStackTop sets the [StructView.StackTop]
func (t *StructView) SetStackTop(v int) *StructView { t.StackTop = v; return t }

// SetStripes sets the [StructView.Stripes]
func (t *StructView) SetStripes(v gi.Stripes) *StructView { t.Stripes = v; return t }

// StructViewInlineType is the [gti.Type] for [StructViewInline]
var StructViewInlineType = gti.AddType(&gti.Type{Name: "cogentcore.org/core/giv.StructViewInline", IDName: "struct-view-inline", Doc: "StructViewInline represents a struct as a single line widget,\nfor smaller structs and those explicitly marked inline.", Embeds: []gti.Field{{Name: "Layout"}}, Fields: []gti.Field{{Name: "Struct", Doc: "the struct that we are a view onto"}, {Name: "StructValView", Doc: "Value for the struct itself, if this was created within value view framework -- otherwise nil"}, {Name: "AddButton", Doc: "if true add an edit action button at the end -- other users of this widget can then configure that -- it is called 'edit-action'"}, {Name: "FieldViews", Doc: "Value representations of the fields"}, {Name: "TmpSave", Doc: "value view that needs to have SaveTmp called on it whenever a change is made to one of the underlying values -- pass this down to any sub-views created from a parent"}, {Name: "ViewPath", Doc: "a record of parent View names that have led up to this view -- displayed as extra contextual information in view dialog windows"}, {Name: "HasViewIfs", Doc: "if true, some fields have viewif conditional view tags -- update after.."}}, Instance: &StructViewInline{}})

// NewStructViewInline adds a new [StructViewInline] with the given name to the given parent:
// StructViewInline represents a struct as a single line widget,
// for smaller structs and those explicitly marked inline.
func NewStructViewInline(par ki.Ki, name ...string) *StructViewInline {
	return par.NewChild(StructViewInlineType, name...).(*StructViewInline)
}

// KiType returns the [*gti.Type] of [StructViewInline]
func (t *StructViewInline) KiType() *gti.Type { return StructViewInlineType }

// New returns a new [*StructViewInline] value
func (t *StructViewInline) New() ki.Ki { return &StructViewInline{} }

// SetStructValView sets the [StructViewInline.StructValView]:
// Value for the struct itself, if this was created within value view framework -- otherwise nil
func (t *StructViewInline) SetStructValView(v Value) *StructViewInline { t.StructValView = v; return t }

// SetAddButton sets the [StructViewInline.AddButton]:
// if true add an edit action button at the end -- other users of this widget can then configure that -- it is called 'edit-action'
func (t *StructViewInline) SetAddButton(v bool) *StructViewInline { t.AddButton = v; return t }

// SetFieldViews sets the [StructViewInline.FieldViews]:
// Value representations of the fields
func (t *StructViewInline) SetFieldViews(v ...Value) *StructViewInline { t.FieldViews = v; return t }

// SetTmpSave sets the [StructViewInline.TmpSave]:
// value view that needs to have SaveTmp called on it whenever a change is made to one of the underlying values -- pass this down to any sub-views created from a parent
func (t *StructViewInline) SetTmpSave(v Value) *StructViewInline { t.TmpSave = v; return t }

// SetViewPath sets the [StructViewInline.ViewPath]:
// a record of parent View names that have led up to this view -- displayed as extra contextual information in view dialog windows
func (t *StructViewInline) SetViewPath(v string) *StructViewInline { t.ViewPath = v; return t }

// SetHasViewIfs sets the [StructViewInline.HasViewIfs]:
// if true, some fields have viewif conditional view tags -- update after..
func (t *StructViewInline) SetHasViewIfs(v bool) *StructViewInline { t.HasViewIfs = v; return t }

// SetTooltip sets the [StructViewInline.Tooltip]
func (t *StructViewInline) SetTooltip(v string) *StructViewInline { t.Tooltip = v; return t }

// SetStackTop sets the [StructViewInline.StackTop]
func (t *StructViewInline) SetStackTop(v int) *StructViewInline { t.StackTop = v; return t }

// TableViewType is the [gti.Type] for [TableView]
var TableViewType = gti.AddType(&gti.Type{Name: "cogentcore.org/core/giv.TableView", IDName: "table-view", Doc: "TableView represents a slice-of-structs as a table, where the fields are\nthe columns, within an overall frame.  It is a full-featured editor with\nmultiple-selection, cut-and-paste, and drag-and-drop.\nIf ReadOnly, it functions as a mutually-exclusive item\nselector, highlighting the selected row and emitting a Selected action.", Embeds: []gti.Field{{Name: "SliceViewBase"}}, Fields: []gti.Field{{Name: "StyleFunc", Doc: "optional styling function"}, {Name: "SelField", Doc: "current selection field -- initially select value in this field"}, {Name: "SortIdx", Doc: "current sort index"}, {Name: "SortDesc", Doc: "whether current sort order is descending"}, {Name: "StruType", Doc: "struct type for each row"}, {Name: "VisFields", Doc: "the visible fields"}, {Name: "NVisFields", Doc: "number of visible fields"}, {Name: "HeaderWidths", Doc: "HeaderWidths has number of characters in each header, per visfields"}}, Instance: &TableView{}})

// NewTableView adds a new [TableView] with the given name to the given parent:
// TableView represents a slice-of-structs as a table, where the fields are
// the columns, within an overall frame.  It is a full-featured editor with
// multiple-selection, cut-and-paste, and drag-and-drop.
// If ReadOnly, it functions as a mutually-exclusive item
// selector, highlighting the selected row and emitting a Selected action.
func NewTableView(par ki.Ki, name ...string) *TableView {
	return par.NewChild(TableViewType, name...).(*TableView)
}

// KiType returns the [*gti.Type] of [TableView]
func (t *TableView) KiType() *gti.Type { return TableViewType }

// New returns a new [*TableView] value
func (t *TableView) New() ki.Ki { return &TableView{} }

// SetStyleFunc sets the [TableView.StyleFunc]:
// optional styling function
func (t *TableView) SetStyleFunc(v TableViewStyleFunc) *TableView { t.StyleFunc = v; return t }

// SetSelField sets the [TableView.SelField]:
// current selection field -- initially select value in this field
func (t *TableView) SetSelField(v string) *TableView { t.SelField = v; return t }

// SetSortIdx sets the [TableView.SortIdx]:
// current sort index
func (t *TableView) SetSortIdx(v int) *TableView { t.SortIdx = v; return t }

// SetSortDesc sets the [TableView.SortDesc]:
// whether current sort order is descending
func (t *TableView) SetSortDesc(v bool) *TableView { t.SortDesc = v; return t }

// SetStruType sets the [TableView.StruType]:
// struct type for each row
func (t *TableView) SetStruType(v reflect.Type) *TableView { t.StruType = v; return t }

// SetVisFields sets the [TableView.VisFields]:
// the visible fields
func (t *TableView) SetVisFields(v ...reflect.StructField) *TableView { t.VisFields = v; return t }

// SetNvisFields sets the [TableView.NVisFields]:
// number of visible fields
func (t *TableView) SetNvisFields(v int) *TableView { t.NVisFields = v; return t }

// SetHeaderWidths sets the [TableView.HeaderWidths]:
// HeaderWidths has number of characters in each header, per visfields
func (t *TableView) SetHeaderWidths(v ...int) *TableView { t.HeaderWidths = v; return t }

// SetTooltip sets the [TableView.Tooltip]
func (t *TableView) SetTooltip(v string) *TableView { t.Tooltip = v; return t }

// SetStackTop sets the [TableView.StackTop]
func (t *TableView) SetStackTop(v int) *TableView { t.StackTop = v; return t }

// SetStripes sets the [TableView.Stripes]
func (t *TableView) SetStripes(v gi.Stripes) *TableView { t.Stripes = v; return t }

// SetMinRows sets the [TableView.MinRows]
func (t *TableView) SetMinRows(v int) *TableView { t.MinRows = v; return t }

// SetViewMu sets the [TableView.ViewMu]
func (t *TableView) SetViewMu(v *sync.Mutex) *TableView { t.ViewMu = v; return t }

// SetSliceNpval sets the [TableView.SliceNPVal]
func (t *TableView) SetSliceNpval(v reflect.Value) *TableView { t.SliceNPVal = v; return t }

// SetSliceValView sets the [TableView.SliceValView]
func (t *TableView) SetSliceValView(v Value) *TableView { t.SliceValView = v; return t }

// SetValues sets the [TableView.Values]
func (t *TableView) SetValues(v ...Value) *TableView { t.Values = v; return t }

// SetSelVal sets the [TableView.SelVal]
func (t *TableView) SetSelVal(v any) *TableView { t.SelVal = v; return t }

// SetSelIdx sets the [TableView.SelIdx]
func (t *TableView) SetSelIdx(v int) *TableView { t.SelIdx = v; return t }

// SetSelIdxs sets the [TableView.SelIdxs]
func (t *TableView) SetSelIdxs(v map[int]struct{}) *TableView { t.SelIdxs = v; return t }

// SetInitSelIdx sets the [TableView.InitSelIdx]
func (t *TableView) SetInitSelIdx(v int) *TableView { t.InitSelIdx = v; return t }

// SetDraggedIdxs sets the [TableView.DraggedIdxs]
func (t *TableView) SetDraggedIdxs(v ...int) *TableView { t.DraggedIdxs = v; return t }

// SetViewPath sets the [TableView.ViewPath]
func (t *TableView) SetViewPath(v string) *TableView { t.ViewPath = v; return t }

// SetTmpSave sets the [TableView.TmpSave]
func (t *TableView) SetTmpSave(v Value) *TableView { t.TmpSave = v; return t }

// SetVisRows sets the [TableView.VisRows]
func (t *TableView) SetVisRows(v int) *TableView { t.VisRows = v; return t }

// SetStartIdx sets the [TableView.StartIdx]
func (t *TableView) SetStartIdx(v int) *TableView { t.StartIdx = v; return t }

// SetSliceSize sets the [TableView.SliceSize]
func (t *TableView) SetSliceSize(v int) *TableView { t.SliceSize = v; return t }

// SetConfigIter sets the [TableView.ConfigIter]
func (t *TableView) SetConfigIter(v int) *TableView { t.ConfigIter = v; return t }

// SetTmpIdx sets the [TableView.TmpIdx]
func (t *TableView) SetTmpIdx(v int) *TableView { t.TmpIdx = v; return t }

// SetElVal sets the [TableView.ElVal]
func (t *TableView) SetElVal(v reflect.Value) *TableView { t.ElVal = v; return t }

// TimeViewType is the [gti.Type] for [TimeView]
var TimeViewType = gti.AddType(&gti.Type{Name: "cogentcore.org/core/giv.TimeView", IDName: "time-view", Doc: "TimeView is a view for selecting a time", Embeds: []gti.Field{{Name: "Frame"}}, Fields: []gti.Field{{Name: "Time", Doc: "the time that we are viewing"}, {Name: "TmpSave", Doc: "value view that needs to have SaveTmp called on it whenever a change is made to one of the underlying values -- pass this down to any sub-views created from a parent"}, {Name: "ViewPath", Doc: "a record of parent View names that have led up to this view -- displayed as extra contextual information in view dialog windows"}, {Name: "Hour", Doc: "the raw input hour"}, {Name: "PM", Doc: "whether we are in PM mode (so we have to add 12h to everything)"}}, Instance: &TimeView{}})

// NewTimeView adds a new [TimeView] with the given name to the given parent:
// TimeView is a view for selecting a time
func NewTimeView(par ki.Ki, name ...string) *TimeView {
	return par.NewChild(TimeViewType, name...).(*TimeView)
}

// KiType returns the [*gti.Type] of [TimeView]
func (t *TimeView) KiType() *gti.Type { return TimeViewType }

// New returns a new [*TimeView] value
func (t *TimeView) New() ki.Ki { return &TimeView{} }

// SetTmpSave sets the [TimeView.TmpSave]:
// value view that needs to have SaveTmp called on it whenever a change is made to one of the underlying values -- pass this down to any sub-views created from a parent
func (t *TimeView) SetTmpSave(v Value) *TimeView { t.TmpSave = v; return t }

// SetViewPath sets the [TimeView.ViewPath]:
// a record of parent View names that have led up to this view -- displayed as extra contextual information in view dialog windows
func (t *TimeView) SetViewPath(v string) *TimeView { t.ViewPath = v; return t }

// SetTooltip sets the [TimeView.Tooltip]
func (t *TimeView) SetTooltip(v string) *TimeView { t.Tooltip = v; return t }

// SetStackTop sets the [TimeView.StackTop]
func (t *TimeView) SetStackTop(v int) *TimeView { t.StackTop = v; return t }

// SetStripes sets the [TimeView.Stripes]
func (t *TimeView) SetStripes(v gi.Stripes) *TimeView { t.Stripes = v; return t }

// DateViewType is the [gti.Type] for [DateView]
var DateViewType = gti.AddType(&gti.Type{Name: "cogentcore.org/core/giv.DateView", IDName: "date-view", Doc: "DateView is a view for selecting a date", Embeds: []gti.Field{{Name: "Frame"}}, Fields: []gti.Field{{Name: "Time", Doc: "the time that we are viewing"}, {Name: "TmpSave", Doc: "value view that needs to have SaveTmp called on it whenever a change\nis made to one of the underlying values.\npass this down to any sub-views created from a parent"}, {Name: "ViewPath", Doc: "a record of parent View names that have led up to this view\ndisplayed as extra contextual information in view dialog windows"}, {Name: "ConfigTime", Doc: "ConfigTime is the time that was configured"}}, Instance: &DateView{}})

// NewDateView adds a new [DateView] with the given name to the given parent:
// DateView is a view for selecting a date
func NewDateView(par ki.Ki, name ...string) *DateView {
	return par.NewChild(DateViewType, name...).(*DateView)
}

// KiType returns the [*gti.Type] of [DateView]
func (t *DateView) KiType() *gti.Type { return DateViewType }

// New returns a new [*DateView] value
func (t *DateView) New() ki.Ki { return &DateView{} }

// SetTmpSave sets the [DateView.TmpSave]:
// value view that needs to have SaveTmp called on it whenever a change
// is made to one of the underlying values.
// pass this down to any sub-views created from a parent
func (t *DateView) SetTmpSave(v Value) *DateView { t.TmpSave = v; return t }

// SetViewPath sets the [DateView.ViewPath]:
// a record of parent View names that have led up to this view
// displayed as extra contextual information in view dialog windows
func (t *DateView) SetViewPath(v string) *DateView { t.ViewPath = v; return t }

// SetTooltip sets the [DateView.Tooltip]
func (t *DateView) SetTooltip(v string) *DateView { t.Tooltip = v; return t }

// SetStackTop sets the [DateView.StackTop]
func (t *DateView) SetStackTop(v int) *DateView { t.StackTop = v; return t }

// SetStripes sets the [DateView.Stripes]
func (t *DateView) SetStripes(v gi.Stripes) *DateView { t.Stripes = v; return t }

// TreeTableViewType is the [gti.Type] for [TreeTableView]
var TreeTableViewType = gti.AddType(&gti.Type{Name: "cogentcore.org/core/giv.TreeTableView", IDName: "tree-table-view", Doc: "TreeTableView combines a [TreeView] and [TableView].", Embeds: []gti.Field{{Name: "Frame"}}, Fields: []gti.Field{{Name: "Tree", Doc: "Tree is the tree view component of the tree table view."}, {Name: "Table", Doc: "Table is the table view component of the tree table view."}}, Instance: &TreeTableView{}})

// NewTreeTableView adds a new [TreeTableView] with the given name to the given parent:
// TreeTableView combines a [TreeView] and [TableView].
func NewTreeTableView(par ki.Ki, name ...string) *TreeTableView {
	return par.NewChild(TreeTableViewType, name...).(*TreeTableView)
}

// KiType returns the [*gti.Type] of [TreeTableView]
func (t *TreeTableView) KiType() *gti.Type { return TreeTableViewType }

// New returns a new [*TreeTableView] value
func (t *TreeTableView) New() ki.Ki { return &TreeTableView{} }

// SetTooltip sets the [TreeTableView.Tooltip]
func (t *TreeTableView) SetTooltip(v string) *TreeTableView { t.Tooltip = v; return t }

// SetStackTop sets the [TreeTableView.StackTop]
func (t *TreeTableView) SetStackTop(v int) *TreeTableView { t.StackTop = v; return t }

// SetStripes sets the [TreeTableView.Stripes]
func (t *TreeTableView) SetStripes(v gi.Stripes) *TreeTableView { t.Stripes = v; return t }

// TreeViewType is the [gti.Type] for [TreeView]
var TreeViewType = gti.AddType(&gti.Type{Name: "cogentcore.org/core/giv.TreeView", IDName: "tree-view", Doc: "TreeView provides a graphical representation of a tree tructure\nproviding full navigation and manipulation abilities.\n\nIf the SyncNode field is non-nil, typically via\nSyncRootNode method, then the TreeView mirrors another\nKi tree structure, and tree editing functions apply to\nthe source tree first, and then to the TreeView by sync.\n\nOtherwise, data can be directly encoded in a TreeView\nderived type, to represent any kind of tree structure\nand associated data.\n\nStandard events.Event are sent to any listeners, including\nSelect, Change, and DoubleClick.  The selected nodes\nare in the root SelectedNodes list.", Methods: []gti.Method{{Name: "InsertAfter", Doc: "InsertAfter inserts a new node in the tree\nafter this node, at the same (sibling) level,\nprompting for the type of node to insert.\nIf SyncNode is set, operates on Sync Tree.", Directives: []gti.Directive{{Tool: "gti", Directive: "add"}}}, {Name: "InsertBefore", Doc: "InsertBefore inserts a new node in the tree\nbefore this node, at the same (sibling) level,\nprompting for the type of node to insert\nIf SyncNode is set, operates on Sync Tree.", Directives: []gti.Directive{{Tool: "gti", Directive: "add"}}}, {Name: "AddChildNode", Doc: "AddChildNode adds a new child node to this one in the tree,\nprompting the user for the type of node to add\nIf SyncNode is set, operates on Sync Tree.", Directives: []gti.Directive{{Tool: "gti", Directive: "add"}}}, {Name: "DeleteNode", Doc: "DeleteNode deletes the tree node or sync node corresponding\nto this view node in the sync tree.\nIf SyncNode is set, operates on Sync Tree.", Directives: []gti.Directive{{Tool: "gti", Directive: "add"}}}, {Name: "Duplicate", Doc: "Duplicate duplicates the sync node corresponding to this view node in\nthe tree, and inserts the duplicate after this node (as a new sibling).\nIf SyncNode is set, operates on Sync Tree.", Directives: []gti.Directive{{Tool: "gti", Directive: "add"}}}, {Name: "EditNode", Doc: "EditNode pulls up a StructViewDialog window on the node.\nIf SyncNode is set, operates on Sync Tree.", Directives: []gti.Directive{{Tool: "gti", Directive: "add"}}}, {Name: "InspectNode", Doc: "InspectNode pulls up a new Inspector window on the node.\nIf SyncNode is set, operates on Sync Tree.", Directives: []gti.Directive{{Tool: "gti", Directive: "add"}}}, {Name: "OpenAll", Doc: "OpenAll opens the given node and all of its sub-nodes", Directives: []gti.Directive{{Tool: "gti", Directive: "add"}}}, {Name: "CloseAll", Doc: "CloseAll closes the given node and all of its sub-nodes.", Directives: []gti.Directive{{Tool: "gti", Directive: "add"}}}, {Name: "Copy", Doc: "Copy copies to goosi.Clipboard, optionally resetting the selection.", Directives: []gti.Directive{{Tool: "gti", Directive: "add"}}, Args: []string{"reset"}}, {Name: "Cut", Doc: "Cut copies to goosi.Clipboard and deletes selected items.", Directives: []gti.Directive{{Tool: "gti", Directive: "add"}}}, {Name: "Paste", Doc: "Paste pastes clipboard at given node.", Directives: []gti.Directive{{Tool: "gti", Directive: "add"}}}}, Embeds: []gti.Field{{Name: "WidgetBase"}}, Fields: []gti.Field{{Name: "SyncNode", Doc: "If non-nil, the Ki Node that this widget is viewing in the tree (the source)"}, {Name: "Text", Doc: "The text to display for the tree view item label, which automatically\ndefaults to the [ki.Node.Name] of the tree view node. It has no effect\nif [TreeView.SyncNode] is non-nil."}, {Name: "Icon", Doc: "optional icon, displayed to the the left of the text label"}, {Name: "IconOpen", Doc: "icon to use for an open (expanded) branch; defaults to [icons.KeyboardArrowDown]"}, {Name: "IconClosed", Doc: "icon to use for a closed (collapsed) branch; defaults to [icons.KeyboardArrowRight]"}, {Name: "IconLeaf", Doc: "icon to use for a terminal node branch that has no children; defaults to [icons.Blank]"}, {Name: "Indent", Doc: "amount to indent children relative to this node"}, {Name: "OpenDepth", Doc: "depth for nodes be initialized as open (default 4).\nNodes beyond this depth will be initialized as closed."}, {Name: "ViewIdx", Doc: "linear index of this node within the entire tree.\nupdated on full rebuilds and may sometimes be off,\nbut close enough for expected uses"}, {Name: "WidgetSize", Doc: "size of just this node widget.\nour alloc includes all of our children, but we only draw us."}, {Name: "RootView", Doc: "The cached root of the view. It is automatically set and does not need to be\nset by the end user."}, {Name: "SelectedNodes", Doc: "SelectedNodes holds the currently-selected nodes, on the\nRootView node only."}, {Name: "actStateLayer", Doc: "actStateLayer is the actual state layer of the tree view, which\nshould be used when rendering it and its parts (but not its children).\nthe reason that it exists is so that the children of the tree view\n(other tree views) do not inherit its stateful background color, as\nthat does not look good."}}, Instance: &TreeView{}})

// NewTreeView adds a new [TreeView] with the given name to the given parent:
// TreeView provides a graphical representation of a tree tructure
// providing full navigation and manipulation abilities.
//
// If the SyncNode field is non-nil, typically via
// SyncRootNode method, then the TreeView mirrors another
// Ki tree structure, and tree editing functions apply to
// the source tree first, and then to the TreeView by sync.
//
// Otherwise, data can be directly encoded in a TreeView
// derived type, to represent any kind of tree structure
// and associated data.
//
// Standard events.Event are sent to any listeners, including
// Select, Change, and DoubleClick.  The selected nodes
// are in the root SelectedNodes list.
func NewTreeView(par ki.Ki, name ...string) *TreeView {
	return par.NewChild(TreeViewType, name...).(*TreeView)
}

// KiType returns the [*gti.Type] of [TreeView]
func (t *TreeView) KiType() *gti.Type { return TreeViewType }

// New returns a new [*TreeView] value
func (t *TreeView) New() ki.Ki { return &TreeView{} }

// SetText sets the [TreeView.Text]:
// The text to display for the tree view item label, which automatically
// defaults to the [ki.Node.Name] of the tree view node. It has no effect
// if [TreeView.SyncNode] is non-nil.
func (t *TreeView) SetText(v string) *TreeView { t.Text = v; return t }

// SetIcon sets the [TreeView.Icon]:
// optional icon, displayed to the the left of the text label
func (t *TreeView) SetIcon(v icons.Icon) *TreeView { t.Icon = v; return t }

// SetIconOpen sets the [TreeView.IconOpen]:
// icon to use for an open (expanded) branch; defaults to [icons.KeyboardArrowDown]
func (t *TreeView) SetIconOpen(v icons.Icon) *TreeView { t.IconOpen = v; return t }

// SetIconClosed sets the [TreeView.IconClosed]:
// icon to use for a closed (collapsed) branch; defaults to [icons.KeyboardArrowRight]
func (t *TreeView) SetIconClosed(v icons.Icon) *TreeView { t.IconClosed = v; return t }

// SetIconLeaf sets the [TreeView.IconLeaf]:
// icon to use for a terminal node branch that has no children; defaults to [icons.Blank]
func (t *TreeView) SetIconLeaf(v icons.Icon) *TreeView { t.IconLeaf = v; return t }

// SetIndent sets the [TreeView.Indent]:
// amount to indent children relative to this node
func (t *TreeView) SetIndent(v units.Value) *TreeView { t.Indent = v; return t }

// SetOpenDepth sets the [TreeView.OpenDepth]:
// depth for nodes be initialized as open (default 4).
// Nodes beyond this depth will be initialized as closed.
func (t *TreeView) SetOpenDepth(v int) *TreeView { t.OpenDepth = v; return t }

// SetViewIdx sets the [TreeView.ViewIdx]:
// linear index of this node within the entire tree.
// updated on full rebuilds and may sometimes be off,
// but close enough for expected uses
func (t *TreeView) SetViewIdx(v int) *TreeView { t.ViewIdx = v; return t }

// SetWidgetSize sets the [TreeView.WidgetSize]:
// size of just this node widget.
// our alloc includes all of our children, but we only draw us.
func (t *TreeView) SetWidgetSize(v mat32.Vec2) *TreeView { t.WidgetSize = v; return t }

// SetRootView sets the [TreeView.RootView]:
// The cached root of the view. It is automatically set and does not need to be
// set by the end user.
func (t *TreeView) SetRootView(v *TreeView) *TreeView { t.RootView = v; return t }

// SetSelectedNodes sets the [TreeView.SelectedNodes]:
// SelectedNodes holds the currently-selected nodes, on the
// RootView node only.
func (t *TreeView) SetSelectedNodes(v ...TreeViewer) *TreeView { t.SelectedNodes = v; return t }

// SetTooltip sets the [TreeView.Tooltip]
func (t *TreeView) SetTooltip(v string) *TreeView { t.Tooltip = v; return t }

var _ = gti.AddFunc(&gti.Func{Name: "cogentcore.org/core/giv.ViewStdKeyMaps", Doc: "ViewStdKeyMaps shows the standard maps that are compiled into the program and have\nall the lastest key functions bound to standard values.  Useful for\ncomparing against custom maps.", Directives: []gti.Directive{{Tool: "gti", Directive: "add"}}})
