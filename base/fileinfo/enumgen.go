// Code generated by "core generate"; DO NOT EDIT.

package fileinfo

import (
	"cogentcore.org/core/enums"
)

var _CategoriesValues = []Categories{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}

// CategoriesN is the highest valid value for type Categories, plus one.
const CategoriesN Categories = 16

var _CategoriesValueMap = map[string]Categories{`UnknownCategory`: 0, `Folder`: 1, `Archive`: 2, `Backup`: 3, `Code`: 4, `Doc`: 5, `Sheet`: 6, `Data`: 7, `Text`: 8, `Image`: 9, `Model`: 10, `Audio`: 11, `Video`: 12, `Font`: 13, `Exe`: 14, `Bin`: 15}

var _CategoriesDescMap = map[Categories]string{0: `UnknownCategory is an unknown file category`, 1: `Folder is a folder / directory`, 2: `Archive is a collection of files, e.g., zip tar`, 3: `Backup is a backup file (# ~ etc)`, 4: `Code is a programming language file`, 5: `Doc is an editable word processing file including latex, markdown, html, css, etc`, 6: `Sheet is a spreadsheet file (.xls etc)`, 7: `Data is some kind of data format (csv, json, database, etc)`, 8: `Text is some other kind of text file`, 9: `Image is an image (jpeg, png, svg, etc) *including* PDF`, 10: `Model is a 3D model`, 11: `Audio is an audio file`, 12: `Video is a video file`, 13: `Font is a font file`, 14: `Exe is a binary executable file (scripts go in Code)`, 15: `Bin is some other type of binary (object files, libraries, etc)`}

var _CategoriesMap = map[Categories]string{0: `UnknownCategory`, 1: `Folder`, 2: `Archive`, 3: `Backup`, 4: `Code`, 5: `Doc`, 6: `Sheet`, 7: `Data`, 8: `Text`, 9: `Image`, 10: `Model`, 11: `Audio`, 12: `Video`, 13: `Font`, 14: `Exe`, 15: `Bin`}

// String returns the string representation of this Categories value.
func (i Categories) String() string { return enums.String(i, _CategoriesMap) }

// SetString sets the Categories value from its string representation,
// and returns an error if the string is invalid.
func (i *Categories) SetString(s string) error {
	return enums.SetString(i, s, _CategoriesValueMap, "Categories")
}

// Int64 returns the Categories value as an int64.
func (i Categories) Int64() int64 { return int64(i) }

// SetInt64 sets the Categories value from an int64.
func (i *Categories) SetInt64(in int64) { *i = Categories(in) }

// Desc returns the description of the Categories value.
func (i Categories) Desc() string { return enums.Desc(i, _CategoriesDescMap) }

// CategoriesValues returns all possible values for the type Categories.
func CategoriesValues() []Categories { return _CategoriesValues }

// Values returns all possible values for the type Categories.
func (i Categories) Values() []enums.Enum { return enums.Values(_CategoriesValues) }

// MarshalText implements the [encoding.TextMarshaler] interface.
func (i Categories) MarshalText() ([]byte, error) { return []byte(i.String()), nil }

// UnmarshalText implements the [encoding.TextUnmarshaler] interface.
func (i *Categories) UnmarshalText(text []byte) error {
	return enums.UnmarshalText(i, text, "Categories")
}

var _KnownValues = []Known{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132}

// KnownN is the highest valid value for type Known, plus one.
const KnownN Known = 133

var _KnownValueMap = map[string]Known{`Unknown`: 0, `Any`: 1, `AnyKnown`: 2, `AnyFolder`: 3, `AnyArchive`: 4, `Multipart`: 5, `Tar`: 6, `Zip`: 7, `GZip`: 8, `SevenZ`: 9, `Xz`: 10, `BZip`: 11, `Dmg`: 12, `Shar`: 13, `AnyBackup`: 14, `Trash`: 15, `AnyCode`: 16, `Ada`: 17, `Bash`: 18, `Cosh`: 19, `Csh`: 20, `C`: 21, `CSharp`: 22, `D`: 23, `Diff`: 24, `Eiffel`: 25, `Erlang`: 26, `Forth`: 27, `Fortran`: 28, `FSharp`: 29, `Go`: 30, `Goal`: 31, `Haskell`: 32, `Java`: 33, `JavaScript`: 34, `Lisp`: 35, `Lua`: 36, `Makefile`: 37, `Mathematica`: 38, `Matlab`: 39, `ObjC`: 40, `OCaml`: 41, `Pascal`: 42, `Perl`: 43, `Php`: 44, `Prolog`: 45, `Python`: 46, `R`: 47, `Ruby`: 48, `Rust`: 49, `Scala`: 50, `SQL`: 51, `Tcl`: 52, `AnyDoc`: 53, `BibTeX`: 54, `TeX`: 55, `Texinfo`: 56, `Troff`: 57, `Html`: 58, `Css`: 59, `Markdown`: 60, `Rtf`: 61, `MSWord`: 62, `OpenText`: 63, `OpenPres`: 64, `MSPowerpoint`: 65, `EBook`: 66, `EPub`: 67, `AnySheet`: 68, `MSExcel`: 69, `OpenSheet`: 70, `AnyData`: 71, `Csv`: 72, `Json`: 73, `Xml`: 74, `Protobuf`: 75, `Ini`: 76, `Tsv`: 77, `Uri`: 78, `Color`: 79, `Yaml`: 80, `Toml`: 81, `Number`: 82, `String`: 83, `Tensor`: 84, `Table`: 85, `AnyText`: 86, `PlainText`: 87, `ICal`: 88, `VCal`: 89, `VCard`: 90, `AnyImage`: 91, `Pdf`: 92, `Postscript`: 93, `Gimp`: 94, `GraphVis`: 95, `Gif`: 96, `Jpeg`: 97, `Png`: 98, `Svg`: 99, `Tiff`: 100, `Pnm`: 101, `Pbm`: 102, `Pgm`: 103, `Ppm`: 104, `Xbm`: 105, `Xpm`: 106, `Bmp`: 107, `Heic`: 108, `Heif`: 109, `AnyModel`: 110, `Vrml`: 111, `X3d`: 112, `Obj`: 113, `AnyAudio`: 114, `Aac`: 115, `Flac`: 116, `Mp3`: 117, `Ogg`: 118, `Midi`: 119, `Wav`: 120, `AnyVideo`: 121, `Mpeg`: 122, `Mp4`: 123, `Mov`: 124, `Ogv`: 125, `Wmv`: 126, `Avi`: 127, `AnyFont`: 128, `TrueType`: 129, `WebOpenFont`: 130, `AnyExe`: 131, `AnyBin`: 132}

var _KnownDescMap = map[Known]string{0: `Unknown = a non-known file type`, 1: `Any is used when selecting a file type, if any type is OK (including Unknown) see also AnyKnown and the Any options for each category`, 2: `AnyKnown is used when selecting a file type, if any Known file type is OK (excludes Unknown) -- see Any and Any options for each category`, 3: `Folder is a folder / directory`, 4: `Archive is a collection of files, e.g., zip tar`, 5: ``, 6: ``, 7: ``, 8: ``, 9: ``, 10: ``, 11: ``, 12: ``, 13: ``, 14: `Backup files`, 15: ``, 16: `Code is a programming language file`, 17: ``, 18: ``, 19: ``, 20: ``, 21: ``, 22: ``, 23: ``, 24: ``, 25: ``, 26: ``, 27: ``, 28: ``, 29: ``, 30: ``, 31: ``, 32: ``, 33: ``, 34: ``, 35: ``, 36: ``, 37: ``, 38: ``, 39: ``, 40: ``, 41: ``, 42: ``, 43: ``, 44: ``, 45: ``, 46: ``, 47: ``, 48: ``, 49: ``, 50: ``, 51: ``, 52: ``, 53: `Doc is an editable word processing file including latex, markdown, html, css, etc`, 54: ``, 55: ``, 56: ``, 57: ``, 58: ``, 59: ``, 60: ``, 61: ``, 62: ``, 63: ``, 64: ``, 65: ``, 66: ``, 67: ``, 68: `Sheet is a spreadsheet file (.xls etc)`, 69: ``, 70: ``, 71: `Data is some kind of data format (csv, json, database, etc)`, 72: ``, 73: ``, 74: ``, 75: ``, 76: ``, 77: ``, 78: ``, 79: ``, 80: ``, 81: ``, 82: `special support for data fs`, 83: ``, 84: ``, 85: ``, 86: `Text is some other kind of text file`, 87: ``, 88: ``, 89: ``, 90: ``, 91: `Image is an image (jpeg, png, svg, etc) *including* PDF`, 92: ``, 93: ``, 94: ``, 95: ``, 96: ``, 97: ``, 98: ``, 99: ``, 100: ``, 101: ``, 102: ``, 103: ``, 104: ``, 105: ``, 106: ``, 107: ``, 108: ``, 109: ``, 110: `Model is a 3D model`, 111: ``, 112: ``, 113: ``, 114: `Audio is an audio file`, 115: ``, 116: ``, 117: ``, 118: ``, 119: ``, 120: ``, 121: `Video is a video file`, 122: ``, 123: ``, 124: ``, 125: ``, 126: ``, 127: ``, 128: `Font is a font file`, 129: ``, 130: ``, 131: `Exe is a binary executable file`, 132: `Bin is some other unrecognized binary type`}

var _KnownMap = map[Known]string{0: `Unknown`, 1: `Any`, 2: `AnyKnown`, 3: `AnyFolder`, 4: `AnyArchive`, 5: `Multipart`, 6: `Tar`, 7: `Zip`, 8: `GZip`, 9: `SevenZ`, 10: `Xz`, 11: `BZip`, 12: `Dmg`, 13: `Shar`, 14: `AnyBackup`, 15: `Trash`, 16: `AnyCode`, 17: `Ada`, 18: `Bash`, 19: `Cosh`, 20: `Csh`, 21: `C`, 22: `CSharp`, 23: `D`, 24: `Diff`, 25: `Eiffel`, 26: `Erlang`, 27: `Forth`, 28: `Fortran`, 29: `FSharp`, 30: `Go`, 31: `Goal`, 32: `Haskell`, 33: `Java`, 34: `JavaScript`, 35: `Lisp`, 36: `Lua`, 37: `Makefile`, 38: `Mathematica`, 39: `Matlab`, 40: `ObjC`, 41: `OCaml`, 42: `Pascal`, 43: `Perl`, 44: `Php`, 45: `Prolog`, 46: `Python`, 47: `R`, 48: `Ruby`, 49: `Rust`, 50: `Scala`, 51: `SQL`, 52: `Tcl`, 53: `AnyDoc`, 54: `BibTeX`, 55: `TeX`, 56: `Texinfo`, 57: `Troff`, 58: `Html`, 59: `Css`, 60: `Markdown`, 61: `Rtf`, 62: `MSWord`, 63: `OpenText`, 64: `OpenPres`, 65: `MSPowerpoint`, 66: `EBook`, 67: `EPub`, 68: `AnySheet`, 69: `MSExcel`, 70: `OpenSheet`, 71: `AnyData`, 72: `Csv`, 73: `Json`, 74: `Xml`, 75: `Protobuf`, 76: `Ini`, 77: `Tsv`, 78: `Uri`, 79: `Color`, 80: `Yaml`, 81: `Toml`, 82: `Number`, 83: `String`, 84: `Tensor`, 85: `Table`, 86: `AnyText`, 87: `PlainText`, 88: `ICal`, 89: `VCal`, 90: `VCard`, 91: `AnyImage`, 92: `Pdf`, 93: `Postscript`, 94: `Gimp`, 95: `GraphVis`, 96: `Gif`, 97: `Jpeg`, 98: `Png`, 99: `Svg`, 100: `Tiff`, 101: `Pnm`, 102: `Pbm`, 103: `Pgm`, 104: `Ppm`, 105: `Xbm`, 106: `Xpm`, 107: `Bmp`, 108: `Heic`, 109: `Heif`, 110: `AnyModel`, 111: `Vrml`, 112: `X3d`, 113: `Obj`, 114: `AnyAudio`, 115: `Aac`, 116: `Flac`, 117: `Mp3`, 118: `Ogg`, 119: `Midi`, 120: `Wav`, 121: `AnyVideo`, 122: `Mpeg`, 123: `Mp4`, 124: `Mov`, 125: `Ogv`, 126: `Wmv`, 127: `Avi`, 128: `AnyFont`, 129: `TrueType`, 130: `WebOpenFont`, 131: `AnyExe`, 132: `AnyBin`}

// String returns the string representation of this Known value.
func (i Known) String() string { return enums.String(i, _KnownMap) }

// SetString sets the Known value from its string representation,
// and returns an error if the string is invalid.
func (i *Known) SetString(s string) error { return enums.SetString(i, s, _KnownValueMap, "Known") }

// Int64 returns the Known value as an int64.
func (i Known) Int64() int64 { return int64(i) }

// SetInt64 sets the Known value from an int64.
func (i *Known) SetInt64(in int64) { *i = Known(in) }

// Desc returns the description of the Known value.
func (i Known) Desc() string { return enums.Desc(i, _KnownDescMap) }

// KnownValues returns all possible values for the type Known.
func KnownValues() []Known { return _KnownValues }

// Values returns all possible values for the type Known.
func (i Known) Values() []enums.Enum { return enums.Values(_KnownValues) }

// MarshalText implements the [encoding.TextMarshaler] interface.
func (i Known) MarshalText() ([]byte, error) { return []byte(i.String()), nil }

// UnmarshalText implements the [encoding.TextUnmarshaler] interface.
func (i *Known) UnmarshalText(text []byte) error { return enums.UnmarshalText(i, text, "Known") }
